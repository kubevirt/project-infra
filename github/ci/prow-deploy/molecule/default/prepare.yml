- hosts: instance
  tasks:
    - name: set deploy environment
      set_fact:
        deploy_environment: 'kubevirtci-testing'

    - name: Include overlay config
      include_vars:
        file: "{{ deploy_environment }}.yml"

    - name: set local project infra root
      set_fact:
        local_project_infra_root: '{{ playbook_dir}}/../../../../../'

    - name: create project-infra dir
      file:
        path: '{{ project_infra_root }}'
        state: directory

    - name: upload project-infra files
      synchronize:
        src: '{{ local_project_infra_root }}'
        dest: '{{ project_infra_root }}'
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=venv"

    - name: Launch Docker in Docker
      shell: |
        /usr/local/bin/start_dind.sh
      changed_when: false

    - name: Create cluster
      block:
        - name: create cluster config
          copy:
            dest: '{{ kind.cluster_config }}'
            content: |
              kind: Cluster
              apiVersion: kind.x-k8s.io/v1alpha4
              nodes:
              - role: control-plane
              - role: worker
                extraPortMappings:
                - containerPort: 80
                  hostPort: 80
                - containerPort: 443
                  hostPort: 443
                kubeadmConfigPatches:
                - |
                  kind: JoinConfiguration
                  nodeRegistration:
                    name: '{{ node_name }}'
                    kubeletExtraArgs:
                      system-reserved: memory=16Gi
                      node-labels: "ingress-ready=true"
        - name: Launch cluster
          shell: |
            kind delete cluster
            kind create cluster --config {{ kind.cluster_config }} --image quay.io/kubevirtci/kind:{{ kind.image_tag }} --retain
          changed_when: false
          when: "'kubevirtci' in deploy_environment"
      rescue:
        - name: collect deployment information
          include_tasks: collect.yml
    - name: bootstrap cluster
      shell: |
        kubectl apply -f '{{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/resources/bootstrap.yaml'
      changed_when: false
      environment:
        KUBECONFIG: '{{ kubeconfig_path }}'

    - name: set secrets dir
      set_fact:
        secrets_dir: '{{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/secrets/'

    - name: Create secrets dir
      file:
        path: '{{ secrets_dir }}'
        state: directory

    - name: Create kubeconfig secret
      copy:
        src: '{{ kubeconfig_path }}'
        dest: '{{ secrets_dir }}/kubeconfig'
        remote_src: true

    - name: copy production kustomize files
      synchronize:
        src: '{{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/ibmcloud-production/{{ item }}'
        dest: '{{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}'
      delegate_to: '{{ inventory_hostname }}'
      loop:
        - kustomization.yaml
        - patches
        - resources

    - name: patch production resources for testing usage
      block:
        - name: patch ghproxy pvc class
          shell: |
            yq w -i {{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/patches/StrategicMerge/ghproxy.yaml spec.storageClassName standard
        - name: patch ingresses
          shell: |
            yq m -ix {{ project_infra_root }}/github/ci/prow-deploy/kustom/base/manifests/local/{{ item }}-ingress.yaml {{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/patches/StrategicMerge/{{ item }}-ingress.yaml
            yq d -i {{ project_infra_root }}/github/ci/prow-deploy/kustom/base/manifests/local/{{ item }}-ingress.yaml spec.tls[0].secretName
          loop:
            - deck
            - gcsweb
        - name: remove resource patching
          shell: |
            yq d -i {{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/patches/JsonRFC6902/{{ item }}.yaml '(path==/spec/template/spec/containers/0/resources)'
          loop:
            - deck_deployment
            - prow_controller_manager_deployment
