---
- name: wait for pods to be created
  pause:
    seconds: 60

- name: wait for prow pods to be ready
  shell: |
    kubectl wait --namespace kubevirt-prow \
          --for=condition=ready pod \
          --selector=app={{ item }} \
          --timeout=700s
  changed_when: false
  environment:
    KUBECONFIG: '{{ kubeconfig_path }}'
  loop:
    - greenhouse
    - deck
    - docker-mirror-proxy
    - hook
    - sinker
    - tide
    - crier
    - prow-controller-manager
    - horologium
    - github-jira-proxy

- name: deploy ingress controller
  shell: |
    kubectl apply -f '{{ project_infra_root }}/github/ci/prow-deploy/kustom/overlays/{{ deploy_environment }}/resources/ingress-nginx-controller.yaml'
    while [[ $(kubectl get pods --namespace ingress-nginx --selector=app.kubernetes.io/component=controller 2>&1) =~ ^No.resources.found.*$ ]]; do
      echo "waiting for pods"; sleep 1;
    done
    kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=600s
  changed_when: false
  environment:
    KUBECONFIG: '{{ kubeconfig_path }}'

- name: Query GCS interface
  uri:
    url: "https://{{ gcswebUrl }}/healthz"
    validate_certs: no
    return_content: yes
  register: gcs_response

- name: verify GCS interface response is healthy
  assert:
    that:
      - gcs_response.status == 200
      - gcs_response.content == "ok"
    fail_msg: "GCSWEB responded with unhealhty status"
    success_msg: "GCSWEB is reporting correct functionality"

- name: Query deck interface
  uri:
    url: "https://{{ deckUrl }}"
    method: GET
    validate_certs: no
    return_content: yes
  register: deck_response

- name: verify Deck response is healthy
  assert:
    that:
      - deck_response.status == 200
      - '"DOCTYPE html" in deck_response.content'
      - '"Prow Status" in deck_response.content'
    fail_msg: "Deck responded with unhealhty status"
    success_msg: "Deck is reporting correct functionality"

# phony is very strict with certificate validation, and there's no
# way to disable it. For the sake of sanity, hook must not be exposed
# to port https while testing.
- name: verify Prow hook is responding
  shell: |
    phony \
      --address="http://{{ deckUrl }}/hook" \
      --hmac {{ prowHmac }}
  changed_when: false
