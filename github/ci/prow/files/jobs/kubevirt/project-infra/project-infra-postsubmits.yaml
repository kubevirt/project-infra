postsubmits:
  kubevirt/project-infra:
    - name: publish-rehearse-image
      always_run: false
      run_if_changed: "external-plugins/rehearse/.*"
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      max_concurrency: 1
      labels:
        preset-dind-enabled: "true"
        preset-docker-mirror-proxy: "true"
        preset-project-infra-kubevirtci-docker-credential: "true"
      spec:
        nodeSelector:
          type: vm
        containers:
          - image: kubevirtci/bootstrap:v20201119-a5880e0
            command:
              - "/usr/local/bin/runner.sh"
              - "/bin/bash"
              - "-c"
              - >-
                cat $DOCKER_PASSWORD | docker login --username $(<$DOCKER_USER)
                --password-stdin && cd images &&
                ./publish_image.sh rehearse docker.io kubevirtci
            # docker-in-docker needs privileged mode
            securityContext:
              privileged: true
            resources:
              requests:
                memory: "1Gi"
              limits:
                memory: "1Gi"
    - name: publish-kubevirt-infra-bootstrap-image
      always_run: false
      run_if_changed: "images/kubevirt-infra-bootstrap/.*"
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      max_concurrency: 1
      labels:
        preset-dind-enabled: "true"
        preset-docker-mirror-proxy: "true"
        preset-project-infra-kubevirtci-docker-credential: "true"
      spec:
        nodeSelector:
          type: vm
        containers:
          - image: kubevirtci/bootstrap:v20201119-a5880e0
            command:
              - "/usr/local/bin/runner.sh"
              - "/bin/bash"
              - "-c"
              - "cat $DOCKER_PASSWORD | docker login --username $(<$DOCKER_USER) --password-stdin && cd images && ./publish_image.sh kubevirt-infra-bootstrap docker.io kubevirtci"
            # docker-in-docker needs privileged mode
            securityContext:
              privileged: true
            resources:
              requests:
                memory: "1Gi"
              limits:
                memory: "1Gi"
    - name: publish-bootstrap-image
      always_run: false
      run_if_changed: "images/bootstrap/.*"
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      max_concurrency: 1
      labels:
        preset-dind-enabled: "true"
        preset-docker-mirror-proxy: "true"
        preset-project-infra-kubevirtci-docker-credential: "true"
      spec:
        nodeSelector:
          type: vm
        containers:
          - image: kubevirtci/bootstrap:v20201119-a5880e0
            command:
              - "/usr/local/bin/runner.sh"
              - "/bin/bash"
              - "-c"
              - "cat $DOCKER_PASSWORD | docker login --username $(<$DOCKER_USER) --password-stdin && cd images && ./publish_image.sh bootstrap docker.io kubevirtci"
            # docker-in-docker needs privileged mode
            securityContext:
              privileged: true
            resources:
              requests:
                memory: "1Gi"
              limits:
                memory: "1Gi"
    - name: publish-kubekins-e2e-image
      always_run: false
      run_if_changed: "images/kubekins-e2e/.*"
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      max_concurrency: 1
      labels:
        preset-dind-enabled: "true"
        preset-docker-mirror-proxy: "true"
        preset-kubevirtci-quay-credential: "true"
      spec:
        nodeSelector:
          type: vm
        containers:
          - image: kubevirtci/bootstrap:v20201119-a5880e0
            command:
              - "/usr/local/bin/runner.sh"
              - "/bin/bash"
              - "-c"
              - |
                cat "$QUAY_PASSWORD" | docker login --username $(cat "$QUAY_USER") --password-stdin=true quay.io
                cd images
                ./publish_image.sh kubekins-e2e quay.io kubevirtci
            # docker-in-docker needs privileged mode
            securityContext:
              privileged: true
            resources:
              requests:
                memory: "1Gi"
              limits:
                memory: "1Gi"
    - name: publish-kubevirt-userguide-image
      always_run: false
      run_if_changed: "images/kubevirt-userguide/.*"
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      max_concurrency: 1
      labels:
        preset-dind-enabled: "true"
        preset-docker-mirror-proxy: "true"
        preset-kubevirtci-quay-credential: "true"
      spec:
        nodeSelector:
          type: vm
        containers:
          - image: kubevirtci/bootstrap:v20201119-a5880e0
            command:
              - "/usr/local/bin/runner.sh"
              - "/bin/bash"
              - "-c"
              - |
                cat "$QUAY_PASSWORD" | docker login --username $(cat "$QUAY_USER") --password-stdin=true quay.io
                cd images
                ./publish_image.sh kubevirt-userguide quay.io kubevirtci
            # docker-in-docker needs privileged mode
            securityContext:
              privileged: true
            resources:
              requests:
                memory: "1Gi"
              limits:
                memory: "1Gi"
    - name: post-project-infra-prow-deployment
      always_run: false
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      branches:
      # regex for semver from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
      - ^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
      labels:
        preset-docker-mirror-proxy: "true"
      skip_report: false
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: kubevirtci/bootstrap:v20201119-a5880e0
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/gcs/service-account.json
          - name: GITHUB_TOKEN
            value: /etc/github/oauth
          - name: DEPLOY_ENVIRONMENT
            value: ibmcloud-production
          command:
            - "/usr/local/bin/runner.sh"
            - "/bin/bash"
            - "-c"
            - |
              base_dir=github/ci/prow-deploy

              # unencrypt and put in place secrets
              target_dir=$(mktemp -d)
              git clone https://kubevirt-bot:$(cat ${GITHUB_TOKEN})@github.com/kubevirt/secrets ${target_dir}
              gpg --allow-secret-key-import --import /etc/pgp/token
              gpg --decrypt ${target_dir}/secrets.tar.asc > secrets.tar
              tar -xvf secrets.tar
              mkdir -p ${base_dir}/vars/${DEPLOY_ENVIRONMENT}
              mv main.yml ${base_dir}/vars/${DEPLOY_ENVIRONMENT}/secrets.yml

              # install kubectl
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod a+x ./kubectl && mv ./kubectl /usr/local/bin/kubectl

              # install deps and run playbook
              cd ${base_dir}
              apt-get update && apt-get install -y python3-venv --no-install-recommends
              python3 -m venv venv
              source venv/bin/activate
              pip install wheel
              pip install -r requirements.txt
              cat << EOF > inventory
              [local]
              localhost ansible_connection=local
              EOF
              ANSIBLE_ROLES_PATH=$(pwd)/.. ansible-playbook -i inventory prow-deploy.yaml
          resources:
            requests:
              memory: "8Gi"
            limits:
              memory: "8Gi"
          volumeMounts:
          - name: token
            mountPath: /etc/github
          - name: gcs
            mountPath: /etc/gcs
            readOnly: true
          - name: pgp-bot-key
            mountPath: /etc/pgp
            readOnly: true
        volumes:
        - name: token
          secret:
            secretName: oauth-token
        - name: pgp-bot-key
          secret:
            secretName: pgp-bot-key
        - name: gcs
          secret:
            secretName: gcs
    - name: post-project-infra-cert-manager-deployment
      always_run: false
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      run_if_changed: "github/ci/services/cert-manager.*"
      branches:
      - ^master$
      labels:
        preset-docker-mirror-proxy: "true"
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: kubevirtci/bootstrap:v20210112-b29dfd7
          env:
          - name: GITHUB_TOKEN
            value: /etc/github/oauth
          command:
            - "/usr/local/bin/runner.sh"
            - "/bin/bash"
            - "-c"
            - |
              # install yq
              curl -Lo ./yq https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64
              chmod +x ./yq && mv ./yq /usr/local/bin/yq

              # unencrypt secrets
              target_dir=$(mktemp -d)
              git clone https://kubevirt-bot:$(cat ${GITHUB_TOKEN})@github.com/kubevirt/secrets ${target_dir}
              gpg --allow-secret-key-import --import /etc/pgp/token
              gpg --decrypt ${target_dir}/secrets.tar.asc > secrets.tar
              tar -xvf secrets.tar

              # put in place kubeconfig
              mkdir -p ~/.kube
              yq r main.yml 'kubeconfig' > ~/.kube/config

              ./github/ci/services/cert-manager/hack/deploy.sh production
          resources:
            requests:
              memory: "8Gi"
            limits:
              memory: "8Gi"
          volumeMounts:
          - name: token
            mountPath: /etc/github
          - name: pgp-bot-key
            mountPath: /etc/pgp
            readOnly: true
        volumes:
        - name: token
          secret:
            secretName: oauth-token
        - name: pgp-bot-key
          secret:
            secretName: pgp-bot-key
    - name: post-project-infra-ci-search-deployment
      always_run: false
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      run_if_changed: "github/ci/services/ci-search.*"
      branches:
      - ^master$
      labels:
        preset-docker-mirror-proxy: "true"
      spec:
        securityContext:
          runAsUser: 0
        containers:
        - image: kubevirtci/bootstrap:v20210112-b29dfd7
          env:
          - name: GITHUB_TOKEN
            value: /etc/github/oauth
          command:
            - "/usr/local/bin/runner.sh"
            - "/bin/bash"
            - "-c"
            - |
              # install yq
              curl -Lo ./yq https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64
              chmod +x ./yq && mv ./yq /usr/local/bin/yq

              # unencrypt secrets
              target_dir=$(mktemp -d)
              git clone https://kubevirt-bot:$(cat ${GITHUB_TOKEN})@github.com/kubevirt/secrets ${target_dir}
              gpg --allow-secret-key-import --import /etc/pgp/token
              gpg --decrypt ${target_dir}/secrets.tar.asc > secrets.tar
              tar -xvf secrets.tar

              # put in place kubeconfig
              mkdir -p ~/.kube
              yq r main.yml 'kubeconfig' > ~/.kube/config

              # put in place bugzilla api key
              yq r main.yml 'bugzilla.apiKey' > github/ci/services/ci-search/secrets/production/bugzilla-credentials/api

              ./github/ci/services/ci-search/hack/deploy.sh production
          resources:
            requests:
              memory: "8Gi"
            limits:
              memory: "8Gi"
          volumeMounts:
          - name: token
            mountPath: /etc/github
          - name: pgp-bot-key
            mountPath: /etc/pgp
            readOnly: true
        volumes:
        - name: token
          secret:
            secretName: oauth-token
        - name: pgp-bot-key
          secret:
            secretName: pgp-bot-key
    - name: post-project-infra-upload-testgrid-config
      run_if_changed: '^(github/ci/prow/files/jobs/.*)|(github/ci/testgrid/gen-config\.yaml)$'
      branches:
      - master
      annotations:
        testgrid-create-test-group: "false"
      decorate: true
      spec:
        containers:
        - image: gcr.io/k8s-prow/transfigure
          command:
          - /transfigure.sh
          args:
          - /etc/github/oauth
          - github/ci/prow/files/config.yaml
          - github/ci/prow/files/jobs
          - github/ci/testgrid/gen-config.yaml
          - kubevirt
          securityContext:
            runAsUser: 0
          volumeMounts:
          - name: token
            mountPath: /etc/github
        volumes:
        - name: token
          secret:
            secretName: oauth-token
