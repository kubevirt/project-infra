kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: grafana
  name: grafana-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 32Gi
  volumeName: "storage01-pv103-32g"
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: grafana6
  labels:
    app: grafana
    version: v7.3.7
spec:
  serviceName: "grafana"
  replicas: 1
  podManagementPolicy: "Parallel"
  updateStrategy:
   type: "RollingUpdate"
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      nodeSelector:
        type: vm
        zone: ci
      containers:
        - name: grafana
          image: "grafana/grafana:7.3.7"
          imagePullPolicy: "IfNotPresent"
          command:
            - grafana-server
            - --homepath=/usr/share/grafana
            - --config=/etc/grafana/grafana.ini
            - cfg:default.log.mode=console
            - cfg:default.paths.data=/var/lib/grafana
            - cfg:default.log.level=debug
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: config-volume
              mountPath: /etc/grafana
              readOnly: true
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
              readOnly: true
          ports:
            - containerPort: 3000
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi            
      terminationGracePeriodSeconds: 300
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-data
        - name: config-volume
          secret:
            secretName: grafana-config
            items:
            - key: datasources.yaml
              path: provisioning/datasources/datasources.yaml
            - key: dashboards.yaml
              path: provisioning/dashboards/dashboards.yaml
            - key: grafana.ini
              path: grafana.ini
        - name: dashboards
          configMap:
            name: dashboards
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  labels:
    kubernetes.io/name: "Prometheus"
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
