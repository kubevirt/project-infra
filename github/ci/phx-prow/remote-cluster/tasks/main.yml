---
- set_fact:
    automationKubeconfig: "{{ lookup('env', 'HOME') }}/.kube/kubevirt_automation.kubeconfig"
- name: Configure remote cluster
  always:
    - name: Clean temporary kubeconfig
      file:
        path: '{{ automationKubeconfig }}'
        state: absent
  block:
    - name: Ensure user's .kube directory exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.kube"
        state: directory
        mode: '0750'
    - name: Write kubeconfig
      copy:
        content: '{{ kubeconfig }}'
        dest: '{{ automationKubeconfig }}'
    - name: Set kubeconfig file permissions
      file:
        path: '{{ automationKubeconfig }}'
        mode: '0600'
    - name: Create project
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          kind: Namespace
          metadata:
            name: '{{ prowJobsNamespace }}'
          display_name: ProwJobs
          description: KubeVirt Prow jobs are running here
    - name: Create project
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          kind: Namespace
          metadata:
            name: '{{ prowNamespace }}'
          display_name: ProwJobs
          description: KubeVirt Prow components are running here
    - name: Create a service account for Greenhouse
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            namespace: '{{ prowNamespace }}'
            name: greenhouse
    - name: Create Greenhouse PVC
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
           name: greenhouse
           namespace: '{{ prowNamespace }}'
          spec:
           accessModes:
           - ReadWriteOnce
           resources:
             requests:
               storage: 450Gi
           storageClassName: ibmc-vpc-block-general-purpose
    - name: Create Greenhouse deployment
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: greenhouse
            namespace: '{{ prowNamespace }}'
            labels:
              app: greenhouse
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: greenhouse
            template:
              metadata:
                labels:
                  app: greenhouse
                name: greenhouse
                namespace: '{{ prowNamespace }}'
              spec:
                serviceAccountName: greenhouse
                nodeSelector:
                containers:
                - name: greenhouse
                  image: gcr.io/k8s-testimages/greenhouse@sha256:ab1a3421cc3c072a813d8543735f218ca6caa811011391a0e5b00104700e6e7b
                  imagePullPolicy: Always
                  ports:
                  - name: cache
                    containerPort: 8080
                  - name: metrics
                    containerPort: 9090
                  args:
                  - --dir=/data
                  - --min-percent-blocks-free=3
                  volumeMounts:
                  - name: cache
                    mountPath: /data
                  resources:
                    requests:
                      memory: 3Gi
                    limits:
                      memory: 3Gi
                volumes:
                - name: cache
                  persistentVolumeClaim:
                    claimName: greenhouse
    - name: Create Greenhouse service
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: bazel-cache
            labels:
              run: bazel-cache
            namespace: '{{ prowNamespace }}'
          spec:
            ports:
            - port: 8080
              protocol: TCP
            selector:
              app: greenhouse
    - name: Create Greenhouse metrics service
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: bazel-cache-metrics
            labels:
              metrics: "true"
            namespace: '{{ prowNamespace }}'
          spec:
            selector:
              app: greenhouse
            ports:
            - name: default
              protocol: TCP
              port: 80
              targetPort: 9090
    - name: Deploy shared objects
      vars:
        targetKubeconfig: '{{ automationKubeconfig }}'
        targetContext: '{{ remoteClusterProwJobsContext }}'
        targetNamespace: '{{ prowJobsNamespace }}'
      import_role:
        name: shared-deployments
    - name: Create a service account for Prow jobs executor
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            namespace: '{{ prowJobsNamespace }}'
            name: 'prow-jobs-executor'
    - name: Create a role for Prow jobs executor
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            namespace: '{{ prowJobsNamespace }}'
            name: prow-remote-executor-role
          rules:
          - apiGroups:
              - "*"
            resources:
              - "*"
            verbs:
              - "*"
    - name: Create a role binding for prow-remote-executor
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: prow-remote-executor-role-binding
            namespace: '{{ prowJobsNamespace }}'
          roleRef:
            kind: Role
            name: prow-remote-executor-role
            namespace: '{{ prowJobsNamespace }}'
          subjects:
          - kind: ServiceAccount
            name: prow-remote-executor
            namespace: '{{ prowJobsNamespace }}'
    - name: Configure cluster secrets
      vars:
        targetNamespace: '{{ prowJobsNamespace }}'
        targetContext: '{{ remoteClusterProwJobsContext }}'
        automationKubeconfig: '{{ automationKubeconfig }}'
      import_role:
        name: prow-jobs-secrets
      no_log: true
    - name: Create docker mirror proxy PVC
      k8s:
        kubeconfig: '{{ automationKubeconfig }}'
        context: '{{ remoteClusterProwJobsContext }}'
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
           name: docker-mirror-proxy
           namespace: '{{ prowNamespace }}'
          spec:
           accessModes:
           - ReadWriteOnce
           resources:
             requests:
               storage: 450Gi
           storageClassName: ibmc-vpc-block-general-purpose
    - name: Create docker mirror proxy deployment
      command: "oc --kubeconfig {{ automationKubeconfig }} --context {{ remoteClusterProwJobsContext }} -n {{prowNamespace}} apply -f -"
      args:
        stdin: "{{ lookup('template', '{{ role_path }}/templates/mirror-proxy.yaml')}}"
