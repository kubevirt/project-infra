kind: Namespace
apiVersion: v1
metadata:
  name: ci-search

# deploy the controller
---
kind: Service
apiVersion: v1
metadata:
  name: search
  namespace: ci-search
spec:
  selector:
    app: search
  ports:
  - port: 80
    targetPort: 8080

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ci-search
  namespace: ci-search
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: search
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: search
  namespace: ci-search
  annotations:
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"ci-search:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"web\")].image"}]'
spec:
  replicas: 2
  selector:
    matchLabels:
      app: search
  serviceName: ""
  template:
    metadata:
      labels:
        app: search
    spec:
      # Force the thing onto its own snowflake node so it only harms itself and not others.
      tolerations:
      - key: ci.openshift.io/ci-search
        value: "true"
        effect: NoSchedule
        operator: Equal
      nodeSelector:
        ci.openshift.io/ci-search: "true"
      automountServiceAccountToken: false
      containers:
      - name: web
        image: ci-search:latest
        resources:
          requests:
            cpu: 100m
            memory: 1Gi
        volumeMounts:
        - mountPath: /var/lib/ci-search/
          name: search
        command:
        - /usr/bin/search
        - --v=5
        - --debug-listen=localhost:6060
        - --config=/etc/ci-search/config.yaml
        - --interval=10m
        - --path=/var/lib/ci-search/
        - --deck-uri=https://prow.ci.openshift.org
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      name: search
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
