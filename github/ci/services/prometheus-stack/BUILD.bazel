# Bazel GitOps Rules is an alternative to rules_k8s: https://github.com/adobe/rules_gitops
load("@com_adobe_rules_gitops//gitops:defs.bzl", "k8s_deploy")

TEST_CLUSTER = "kind-kind"

TEST_USER = "kind-kind"

PRODUCTION_CLUSTER_CONTROL_PLANE = "ibm-cluster"

PRODUCTION_USER_CONTROL_PLANE = "ibm-prow-jobs-automation"

PRODUCTION_CLUSTER_E2E_WORKLOADS = "prow-workloads-cluster"

PRODUCTION_USER_E2E_WORKLOADS = "prow-workloads-automation"

PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS = "cluster.local"

PRODUCTION_USER_PERFORMANCE_WORKLOADS = "kubernetes-admin"

[
    k8s_deploy(
        name = "%s-crds" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "crds/*.yaml",
        ]),
        namespace = "monitoring",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]

[
    k8s_deploy(
        name = NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/stack/common/*.yaml",
            "manifests/stack/%s/*.yaml" % NAME,
        ]),
        namespace = "monitoring",
        patches = glob([
            "patches/stack/%s/*.yaml" % NAME,
        ]),
        secrets_srcs = glob([
            "secrets/%s/**/*" % NAME,
        ]),
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]


[
    k8s_deploy(
        name = "%s-k8s-services" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/stack/k8s-services/*.yaml",
        ]),
        namespace = "kube-system",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]

[
    k8s_deploy(
        name = "%s-service-monitors" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/service-monitors/common/*.yaml",
            "manifests/service-monitors/%s/*.yaml" % NAME,
        ]),
        patches = glob([
            "patches/service-monitors/%s/*.yaml" % NAME,
        ]),
        namespace = NAMESPACE,
        user = USER,
    )
    for NAME, CLUSTER, USER, NAMESPACE in [
        ("testing", TEST_CLUSTER, TEST_USER, "kubevirt-prow"),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE, "kubevirt-prow"),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS, "kubevirt-prow"),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS, "monitoring"),
    ]
]

[
    k8s_deploy(
        name = "%s-rules" % NAME,
        cluster = CLUSTER,     
        manifests = glob([
            "manifests/rules/common/*.yaml",
            "manifests/rules/%s/*.yaml" % NAME,
        ]),
        patches = glob([
            "patches/rules/%s/*.yaml" % NAME,
        ]),
        namespace = "monitoring",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]



git add github/ci/services/prometheus-stack/manifests/stack/common/kube-prometheus-stack.yaml
git add github/ci/services/prometheus-stack/manifests/service-monitors/common/servicemonitors.yaml
git add github/ci/services/prometheus-stack/manifests/stack/common/node-exporter.yaml
git commit -s -m "moved the service monitors from kube-prometheus-stack to the service monitors folder"

git add github/ci/services/prometheus-stack/manifests/stack/k8s-services/k8s-services.yaml
git commit -s -m "moved the k8s services from kube-prometheus-stack to be able to deploy it to the kube system namespace"


git add github/ci/services/prometheus-stack/manifests/service-monitors/production-performance-workloads/servicemonitors.yaml
git commit -s -m "added custom service monitors with updated jobLabel to find the services in the performance cluster"

git add github/ci/services/prometheus-stack/manifests/stack/production-performance-workloads/grafana-general-dashboards.yaml
git add github/ci/services/prometheus-stack/manifests/stack/production-performance-workloads/grafana-kubevirt-dashboards.yaml
git commit -s -m "added updated default grafana dashboards and custom kubevirt control plane grafana dashboard"

git add github/ci/services/prometheus-stack/manifests/stack/production-performance-workloads/grafana.yaml
git commit -s -m "added grafana deployment with updated image and local path storage class"

git add github/ci/services/prometheus-stack/manifests/stack/production-performance-workloads/local-path-storage.yaml
git commit -s -m "added local path storage provisioner and storage class"

git add github/ci/services/prometheus-stack/patches/service-monitors/production-performance-workloads/servicemonitors.yaml
git commit -s -m "added patch to update matchLabels and jobLabel to allow the node-exporter to create metrics compatible with grafana dashboard"

git add github/ci/services/prometheus-stack/patches/stack/production-control-plane
git add github/ci/services/prometheus-stack/patches/production-e2e-workloads
git add github/ci/services/prometheus-stack/patches/stack/production-e2e-workloads
git add github/ci/services/prometheus-stack/patches/production-control-plane/
git commit -s -m "added a separation in patch type: prometheus stack and service monitors"

git add github/ci/services/prometheus-stack/patches/stack/production-performance-workloads/kube-prometheus-stack.yaml
git add github/ci/services/prometheus-stack/manifests/stack/production-performance-workloads/prometheus-sa.yaml
git commit -s -m "updated prometheus service account since kubevirt only crease service-monitors if the sa prometheus-k8s exist, storage class and retain the data for 12 weeks"

git add github/ci/services/prometheus-stack/patches/stack/production-performance-workloads/alertmanager.yaml
git commit -s -m "added a patch to update alertmanager to use local path storage class"

git add github/ci/services/prometheus-stack/patches/rules/
git commit -s -m "added updated prometheus rules in performance cluster to be able to use updated metrics and grafana dashboards"

git add github/ci/services/prometheus-stack/BUILD.bazel
git add github/ci/services/prometheus-stack/hack/deploy.sh
git commit -s -m "updated the bazel rules to deploy in the performance cluster, separated the k8s-services deployment from the common to use a different namespace"

git add github/ci/services/prometheus-stack/secrets/production-performance-workloads
git commit -s -m "added secret folder to create grafana secret with username and password"

git add github/ci/prow-deploy/files/jobs/kubevirt/project-infra/project-infra-postsubmits.yaml
git commit -s -m "updated job to deploy prometheus operator in the performance cluster"