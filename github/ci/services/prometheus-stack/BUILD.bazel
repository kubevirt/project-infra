# Bazel GitOps Rules is an alternative to rules_k8s: https://github.com/adobe/rules_gitops
load("@com_adobe_rules_gitops//gitops:defs.bzl", "k8s_deploy")

TEST_CLUSTER = "kind-kind"

TEST_USER = "kind-kind"

PRODUCTION_CLUSTER_CONTROL_PLANE = "ibm-cluster"

PRODUCTION_USER_CONTROL_PLANE = "ibm-prow-jobs-automation"

PRODUCTION_CLUSTER_E2E_WORKLOADS = "prow-workloads-cluster"

PRODUCTION_USER_E2E_WORKLOADS = "prow-workloads-automation"

PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS = "cluster.local"

PRODUCTION_USER_PERFORMANCE_WORKLOADS = "kubernetes-admin"

[
    k8s_deploy(
        name = "%s-crds" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "crds/*.yaml",
        ]),
        namespace = "monitoring",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]

[
    k8s_deploy(
        name = NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/stack/common/*.yaml",
            "manifests/stack/%s/*.yaml" % NAME,
        ]),
        namespace = "monitoring",
        patches = glob([
            "patches/stack/%s/*.yaml" % NAME,
        ]),
        secrets_srcs = glob([
            "secrets/%s/**/*" % NAME,
        ]),
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]


[
    k8s_deploy(
        name = "%s-k8s-services" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/stack/k8s-services/*.yaml",
        ]),
        namespace = "kube-system",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]

[
    k8s_deploy(
        name = "%s-service-monitors" % NAME,
        cluster = CLUSTER,
        manifests = glob([
            "manifests/service-monitors/common/*.yaml",
            "manifests/service-monitors/%s/*.yaml" % NAME,
        ]),
        patches = glob([
            "patches/service-monitors/%s/*.yaml" % NAME,
        ]),
        namespace = NAMESPACE,
        user = USER,
    )
    for NAME, CLUSTER, USER, NAMESPACE in [
        ("testing", TEST_CLUSTER, TEST_USER, "kubevirt-prow"),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE, "kubevirt-prow"),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS, "kubevirt-prow"),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS, "monitoring"),
    ]
]

[
    k8s_deploy(
        name = "%s-rules" % NAME,
        cluster = CLUSTER,     
        manifests = glob([
            "manifests/rules/common/*.yaml",
            "manifests/rules/%s/*.yaml" % NAME,
        ]),
        patches = glob([
            "patches/rules/%s/*.yaml" % NAME,
        ]),
        namespace = "monitoring",
        user = USER,
    )
    for NAME, CLUSTER, USER in [
        ("testing", TEST_CLUSTER, TEST_USER),
        ("production-control-plane", PRODUCTION_CLUSTER_CONTROL_PLANE, PRODUCTION_USER_CONTROL_PLANE),
        ("production-e2e-workloads", PRODUCTION_CLUSTER_E2E_WORKLOADS, PRODUCTION_USER_E2E_WORKLOADS),
        ("production-performance-workloads", PRODUCTION_CLUSTER_PERFORMANCE_WORKLOADS, PRODUCTION_USER_PERFORMANCE_WORKLOADS),
    ]
]