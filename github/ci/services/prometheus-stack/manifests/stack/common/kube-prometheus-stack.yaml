---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prometheus-stack-kube-state-metrics
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
spec:
  privileged: false
  volumes:
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: kube-prometheus-stack/templates/alertmanager/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prometheus-stack-kube-prom-alertmanager
  labels:
    app: kube-prometheus-stack-alertmanager

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  privileged: false
  # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #requiredDropCapabilities:
  #  - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: kube-prometheus-stack/templates/prometheus-operator/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prometheus-stack-kube-prom-operator
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  privileged: false
  # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #requiredDropCapabilities:
  #  - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: kube-prometheus-stack/templates/prometheus/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prometheus-stack-kube-prom-prometheus
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  privileged: false
  # Required to prevent escalations to root.
  # allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  #requiredDropCapabilities:
  #  - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Permits the container to run with root privileges as well.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 0
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
  name: prometheus-stack-kube-state-metrics
  namespace: default
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/templates/alertmanager/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-stack-kube-prom-alertmanager
  namespace: default
  labels:
    app: kube-prometheus-stack-alertmanager

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/templates/prometheus-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-stack-kube-prom-operator
  namespace: default
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/templates/prometheus/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-stack-kube-prom-prometheus
  namespace: default
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
imagePullSecrets:
  []
---
# Source: kube-prometheus-stack/templates/alertmanager/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-prometheus-stack-kube-prom-alertmanager
  namespace: default
  labels:
    app: kube-prometheus-stack-alertmanager

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
data:
  alertmanager.yaml: "Z2xvYmFsOgogIHJlc29sdmVfdGltZW91dDogNW0KcmVjZWl2ZXJzOgotIG5hbWU6IGRlZmF1bHQKICBzbGFja19jb25maWdzOiBbXQpyb3V0ZToKICBncm91cF9ieToKICAtIGFsZXJ0bmFtZQogIGdyb3VwX2ludGVydmFsOiA1bQogIGdyb3VwX3dhaXQ6IDMwcwogIHJlY2VpdmVyOiBkZWZhdWx0CiAgcmVwZWF0X2ludGVydmFsOiAxMmgKICByb3V0ZXM6CiAgLSByZWNlaXZlcjogZGVmYXVsdAp0ZW1wbGF0ZXM6Ci0gL2V0Yy9hbGVydG1hbmFnZXIvY29uZmlnLyoudG1wbA=="
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/psp-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
  name: psp-prometheus-stack-kube-state-metrics
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - prometheus-stack-kube-state-metrics
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
  name: prometheus-stack-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: kube-prometheus-stack/templates/prometheus-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-stack-kube-prom-operator
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - alertmanagers/finalizers
  - alertmanagerconfigs
  - prometheuses
  - prometheuses/finalizers
  - thanosrulers
  - thanosrulers/finalizers
  - servicemonitors
  - podmonitors
  - probes
  - prometheusrules
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - ""
  resources:
  - services
  - services/finalizers
  - endpoints
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
---
# Source: kube-prometheus-stack/templates/prometheus-operator/psp-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prometheus-stack-kube-prom-operator-psp
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - prometheus-stack-kube-prom-operator
---
# Source: kube-prometheus-stack/templates/prometheus/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-stack-kube-prom-prometheus
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
rules:
# This permission are not in the kube-prometheus repo
# they're grabbed from https://github.com/prometheus/prometheus/blob/master/documentation/examples/rbac-setup.yml
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - "networking.k8s.io"
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
# Source: kube-prometheus-stack/templates/prometheus/psp-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prometheus-stack-kube-prom-prometheus-psp
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - prometheus-stack-kube-prom-prometheus
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
  name: prometheus-stack-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stack-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: prometheus-stack-kube-state-metrics
  namespace: default
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/psp-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-2.12.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: prometheus-stack
  name: psp-prometheus-stack-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp-prometheus-stack-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: prometheus-stack-kube-state-metrics
    namespace: default
---
# Source: kube-prometheus-stack/templates/prometheus-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-stack-kube-prom-operator
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stack-kube-prom-operator
subjects:
- kind: ServiceAccount
  name: prometheus-stack-kube-prom-operator
  namespace: default
---
# Source: kube-prometheus-stack/templates/prometheus-operator/psp-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prometheus-stack-kube-prom-operator-psp
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stack-kube-prom-operator-psp
subjects:
  - kind: ServiceAccount
    name: prometheus-stack-kube-prom-operator
    namespace: default
---
# Source: kube-prometheus-stack/templates/prometheus/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-stack-kube-prom-prometheus
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stack-kube-prom-prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus-stack-kube-prom-prometheus
    namespace: default
---
# Source: kube-prometheus-stack/templates/prometheus/psp-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-stack-kube-prom-prometheus-psp
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-stack-kube-prom-prometheus-psp
subjects:
  - kind: ServiceAccount
    name: prometheus-stack-kube-prom-prometheus
    namespace: default
---
# Source: kube-prometheus-stack/templates/alertmanager/psp-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prometheus-stack-kube-prom-alertmanager
  namespace: default
  labels:
    app: kube-prometheus-stack-alertmanager

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - prometheus-stack-kube-prom-alertmanager
---
# Source: kube-prometheus-stack/templates/alertmanager/psp-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-stack-kube-prom-alertmanager
  namespace: default
  labels:
    app: kube-prometheus-stack-alertmanager

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-stack-kube-prom-alertmanager
subjects:
  - kind: ServiceAccount
    name: prometheus-stack-kube-prom-alertmanager
    namespace: default
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-stack-kube-state-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-2.12.0"
    app.kubernetes.io/instance: "prometheus-stack"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080

  selector:
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: prometheus-stack
---
# Source: kube-prometheus-stack/templates/alertmanager/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-stack-kube-prom-alertmanager
  namespace: default
  labels:
    app: kube-prometheus-stack-alertmanager
    self-monitor: "true"

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  ports:
  - name: web
    port: 9093
    targetPort: 9093
    protocol: TCP
  selector:
    app: alertmanager
    alertmanager: prometheus-stack-kube-prom-alertmanager
  type: "ClusterIP"
---
# Source: kube-prometheus-stack/templates/prometheus-operator/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-stack-kube-prom-operator
  namespace: default
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  ports:
  - name: http
    port: 8080
    targetPort: http
  selector:
    app: kube-prometheus-stack-operator
    release: "prometheus-stack"
  type: "ClusterIP"
---
# Source: kube-prometheus-stack/templates/prometheus/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-stack-kube-prom-prometheus
  namespace: default
  labels:
    app: kube-prometheus-stack-prometheus
    self-monitor: "true"

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  ports:
  - name: web
    port: 9090
    targetPort: 9090
  selector:
    app: prometheus
    prometheus: prometheus-stack-kube-prom-prometheus
  type: "ClusterIP"
---
# Source: kube-prometheus-stack/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-stack-kube-state-metrics
  namespace: default
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-2.12.0"
    app.kubernetes.io/instance: "prometheus-stack"
    app.kubernetes.io/managed-by: "Helm"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: "prometheus-stack"
    spec:
      hostNetwork: false
      serviceAccountName: prometheus-stack-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
      - name: kube-state-metrics
        args:


        - --collectors=certificatesigningrequests


        - --collectors=configmaps


        - --collectors=cronjobs


        - --collectors=daemonsets


        - --collectors=deployments


        - --collectors=endpoints


        - --collectors=horizontalpodautoscalers


        - --collectors=ingresses


        - --collectors=jobs


        - --collectors=limitranges


        - --collectors=mutatingwebhookconfigurations


        - --collectors=namespaces


        - --collectors=networkpolicies


        - --collectors=nodes


        - --collectors=persistentvolumeclaims


        - --collectors=persistentvolumes


        - --collectors=poddisruptionbudgets


        - --collectors=pods


        - --collectors=replicasets


        - --collectors=replicationcontrollers


        - --collectors=resourcequotas


        - --collectors=secrets


        - --collectors=services


        - --collectors=statefulsets


        - --collectors=storageclasses


        - --collectors=validatingwebhookconfigurations



        - --collectors=volumeattachments





        - --telemetry-port=8081
        imagePullPolicy: IfNotPresent
        image: "quay.io/coreos/kube-state-metrics:v1.9.7"
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
---
# Source: kube-prometheus-stack/templates/prometheus-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-stack-kube-prom-operator
  namespace: default
  labels:
    app: kube-prometheus-stack-operator

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-prometheus-stack-operator
      release: "prometheus-stack"
  template:
    metadata:
      labels:
        app: kube-prometheus-stack-operator

        chart: kube-prometheus-stack-13.6.0
        release: "prometheus-stack"
        heritage: "Helm"
        group: kubevirtci
    spec:
      containers:
        - name: kube-prometheus-stack
          image: "quay.io/prometheus-operator/prometheus-operator:v0.45.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --kubelet-service=kube-system/prometheus-stack-kube-prom-kubelet
            - --localhost=127.0.0.1
            - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.45.0
            - --config-reloader-cpu=100m
            - --config-reloader-memory=50Mi
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-stack-kube-prom-operator
---
# Source: kube-prometheus-stack/templates/prometheus/prometheus.yaml
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus-stack-kube-prom-prometheus
  namespace: default
  labels:
    app: kube-prometheus-stack-prometheus

    chart: kube-prometheus-stack-13.6.0
    release: "prometheus-stack"
    heritage: "Helm"
    group: kubevirtci
spec:
  alerting:
    alertmanagers:
      - namespace: monitoring
        name: prometheus-stack-kube-prom-alertmanager
        port: web
        pathPrefix: "/"
        apiVersion: v2
  image: quay.io/prometheus/prometheus:v2.24.0
  version: v2.24.0
  externalUrl: http://prometheus-stack-kube-prom-prometheus.default:9090
  paused: false
  replicas: 1
  shards: 1
  logLevel:  info
  logFormat:  logfmt
  listenLocal: false
  enableAdminAPI: false
  scrapeInterval: 15s
  resources:
    limits:
      cpu: 700m
      memory: 3Gi
    requests:
      cpu: 500m
      memory: 2Gi
  retention: "2d"
  routePrefix: "/"
  serviceAccountName: prometheus-stack-kube-prom-prometheus
  serviceMonitorSelector:
    matchLabels:
      group: kubevirtci

  serviceMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      group: kubevirtci

  podMonitorNamespaceSelector: {}
  probeSelector:
    matchLabels:
      release: "prometheus-stack"

  probeNamespaceSelector: {}
  securityContext:
    fsGroup: 2000
    runAsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  ruleNamespaceSelector: {}
  ruleSelector:
    matchLabels:
      group: kubevirtci
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 60Gi
  portName: web
