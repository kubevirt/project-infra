/*
 * This file is part of the KubeVirt project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright the KubeVirt Authors.
 *
 */

package cmd

import (
	"encoding/json"
	"fmt"
	randomforest "github.com/malaschitz/randomForest"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"kubevirt.io/project-infra/external-plugins/referee/metrics"
	"net/http"
	"sigs.k8s.io/prow/pkg/interrupts"
	"strconv"
	"time"
)

type server struct {
	Model randomforest.Forest
}

func (s *server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	var requestData *RequestData
	err := json.NewDecoder(r.Body).Decode(&requestData)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(fmt.Errorf("unable to process request body: %v", err).Error()))
		return
	}
	featureClasses := s.Model.Vote(requestData.Features.AsFloatVector())
	err = json.NewEncoder(w).Encode(ResponseData{
		Classes:     featureClasses,
		Description: "test",
	})
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(fmt.Errorf("unable to process request body: %v", err).Error()))
		return
	}
}

var hostModelDataPath *string
var hostPort *int

var hostModelCmd = &cobra.Command{
	Use:   "model",
	Short: "host model hosts a model generated from test data",
	Long: `host model hosts a model from test data generated by the CANNIER method

It loads given data file, then creates the random forest from the data, trains the model
and then creates a server with which users can query it.`,

	RunE: func(cmd *cobra.Command, args []string) error {

		log.WithField("cmd", "host model").Infof("loading model data")
		storedDataModel, err := Load(*hostModelDataPath)
		if err != nil {
			return err
		}

		log.WithField("cmd", "host model").Infof("training model")
		model := storedDataModel.Model()
		model.Train(1000)

		log.WithField("cmd", "host model").Infof("starting to serve on port %d", *hostPort)
		mux := http.NewServeMux()
		mux.Handle("/", &server{
			Model: model,
		})
		httpServer := &http.Server{Addr: ":" + strconv.Itoa(*hostPort), Handler: mux}
		metrics.AddMetricsHandler(mux)
		defer interrupts.WaitForGracefulShutdown()
		interrupts.ListenAndServe(httpServer, 5*time.Second)

		return nil
	},
}

func init() {
	hostCmd.AddCommand(hostModelCmd)

	hostModelDataPath = hostModelCmd.Flags().StringP("host-model-data-filepath", "f", "/tmp/kubevirt-cannier-model-data.yaml", "output path for binary file to write model data to")
	hostPort = hostModelCmd.Flags().IntP("host-port", "p", 8080, "host port for server")

}
