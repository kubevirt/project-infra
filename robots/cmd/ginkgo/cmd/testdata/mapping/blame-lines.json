{"tests/decorators/decorators.go":[{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":1,"line":"package decorators"},{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":2,"line":""},{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":3,"line":"import . \"github.com/onsi/ginkgo/v2\""},{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":4,"line":""},{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":5,"line":"var ("},{"commit_id":"0beeaee05cd","author":"Daniel Hiller","date":"2024-12-13T19:06:25+01:00","line_no":6,"line":"\tQuarantine = Label(\"QUARANTINE\")"},{"commit_id":"0beeaee05cd","author":"Daniel Hiller","date":"2024-12-13T19:06:25+01:00","line_no":7,"line":""},{"commit_id":"0beeaee05cd","author":"Daniel Hiller","date":"2024-12-13T19:06:25+01:00","line_no":8,"line":"\t// Periodic marks tests that must run on periodic lanes only"},{"commit_id":"0beeaee05cd","author":"Daniel Hiller","date":"2024-12-13T19:06:25+01:00","line_no":9,"line":"\t// See https://github.com/kubevirt/kubevirt/pull/12594"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":10,"line":"\tPeriodic    = Label(\"PERIODIC\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":11,"line":"\tConformance = Label(\"conformance\")"},{"commit_id":"ec0ffdb7218","author":"fossedihelm","date":"2023-09-27T11:27:20+02:00","line_no":12,"line":""},{"commit_id":"470ed2559c6","author":"L. Pivarc","date":"2023-01-31T17:16:19+01:00","line_no":13,"line":"\t// SIGs"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":14,"line":"\tSigCompute           = Label(\"sig-compute\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":15,"line":"\tSigOperator          = Label(\"sig-operator\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":16,"line":"\tSigNetwork           = Label(\"sig-network\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":17,"line":"\tSigStorage           = Label(\"sig-storage\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":18,"line":"\tSigComputeRealtime   = Label(\"sig-compute-realtime\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":19,"line":"\tSigComputeMigrations = Label(\"sig-compute-migrations\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":20,"line":"\tSigMonitoring        = Label(\"sig-monitoring\")"},{"commit_id":"0b0a67e56f4","author":"fossedihelm","date":"2024-10-21T18:52:14+02:00","line_no":21,"line":"\tSigPerformance       = Label(\"sig-performance\")"},{"commit_id":"470ed2559c6","author":"L. Pivarc","date":"2023-01-31T17:16:19+01:00","line_no":22,"line":""},{"commit_id":"470ed2559c6","author":"L. Pivarc","date":"2023-01-31T17:16:19+01:00","line_no":23,"line":"\t// HW"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":24,"line":"\tGPU         = Label(\"GPU\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":25,"line":"\tVGPU        = Label(\"VGPU\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":26,"line":"\tSEV         = Label(\"SEV\")"},{"commit_id":"e0c1f121199","author":"Luboslav Pivarc","date":"2024-10-30T11:55:06+01:00","line_no":27,"line":"\tSEVES       = Label(\"SEVES\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":28,"line":"\tSRIOV       = Label(\"SRIOV\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":29,"line":"\tStorageReq  = Label(\"storage-req\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":30,"line":"\tMultus      = Label(\"Multus\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":31,"line":"\tMacvtap     = Label(\"Macvtap\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":32,"line":"\tInvtsc      = Label(\"Invtsc\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":33,"line":"\tKSMRequired = Label(\"KSM-required\")"},{"commit_id":"83db597181b","author":"howard zhang","date":"2024-12-20T15:52:20+08:00","line_no":34,"line":"\tACPI        = Label(\"ACPI\")"},{"commit_id":"470ed2559c6","author":"L. Pivarc","date":"2023-01-31T17:16:19+01:00","line_no":35,"line":""},{"commit_id":"3012ff886f6","author":"Luboslav Pivarc","date":"2024-10-29T23:04:32+01:00","line_no":36,"line":"\t// Deployment"},{"commit_id":"3012ff886f6","author":"Luboslav Pivarc","date":"2024-10-29T23:04:32+01:00","line_no":37,"line":"\tSingleReplica = Label(\"single-replica\")"},{"commit_id":"3012ff886f6","author":"Luboslav Pivarc","date":"2024-10-29T23:04:32+01:00","line_no":38,"line":"\tMultiReplica  = Label(\"multi-replica\")"},{"commit_id":"3012ff886f6","author":"Luboslav Pivarc","date":"2024-10-29T23:04:32+01:00","line_no":39,"line":""},{"commit_id":"470ed2559c6","author":"L. Pivarc","date":"2023-01-31T17:16:19+01:00","line_no":40,"line":"\t// Features"},{"commit_id":"927459968e9","author":"Luboslav Pivarc","date":"2024-10-29T22:05:34+01:00","line_no":41,"line":"\tCPUModel                             = Label(\"cpumodel\")"},{"commit_id":"c35732be65d","author":"Luboslav Pivarc","date":"2024-10-30T11:30:08+01:00","line_no":42,"line":"\tVSOCK                                = Label(\"vsock\")"},{"commit_id":"c35732be65d","author":"Luboslav Pivarc","date":"2024-10-30T11:30:08+01:00","line_no":43,"line":"\tVirtioFS                             = Label(\"virtiofs\")"},{"commit_id":"0cab51b039b","author":"Luboslav Pivarc","date":"2024-11-18T12:42:02+01:00","line_no":44,"line":"\tSoftwareEmulation                    = Label(\"software-emulation\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":45,"line":"\tSysprep                              = Label(\"Sysprep\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":46,"line":"\tWindows                              = Label(\"Windows\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":47,"line":"\tNetworking                           = Label(\"Networking\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":48,"line":"\tVMIlifecycle                         = Label(\"VMIlifecycle\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":49,"line":"\tExpose                               = Label(\"Expose\")"},{"commit_id":"b476ba73867","author":"Brian Carey","date":"2024-12-03T15:53:37Z","line_no":50,"line":"\tNativeSSH                            = Label(\"native-ssh\")"},{"commit_id":"b476ba73867","author":"Brian Carey","date":"2024-12-03T15:53:37Z","line_no":51,"line":"\tExcludeNativeSSH                     = Label(\"exclude-native-ssh\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":52,"line":"\tReenlightenment                      = Label(\"Reenlightenment\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":53,"line":"\tTscFrequencies                       = Label(\"TscFrequencies\")"},{"commit_id":"41b6af99ae0","author":"Luboslav Pivarc","date":"2024-10-22T12:11:04+02:00","line_no":54,"line":"\tHostDiskGate                         = Label(\"HostDiskGate\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":55,"line":"\tVMX                                  = Label(\"VMX\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":56,"line":"\tUpgrade                              = Label(\"Upgrade\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":57,"line":"\tIstio                                = Label(\"Istio\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":58,"line":"\tInPlaceHotplugNICs                   = Label(\"in-place-hotplug-NICs\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":59,"line":"\tMigrationBasedHotplugNICs            = Label(\"migration-based-hotplug-NICs\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":60,"line":"\tNetCustomBindingPlugins              = Label(\"netCustomBindingPlugins\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":61,"line":"\tRequiresTwoSchedulableNodes          = Label(\"requires-two-schedulable-nodes\")"},{"commit_id":"f68fb96c0e7","author":"Antonio Cardace","date":"2024-10-18T12:39:03+02:00","line_no":62,"line":"\tVMLiveUpdateRolloutStrategy          = Label(\"VMLiveUpdateRolloutStrategy\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":63,"line":"\tUSB                                  = Label(\"USB\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":64,"line":"\tRequiresTwoWorkerNodesWithCPUManager = Label(\"requires-two-worker-nodes-with-cpu-manager\")"},{"commit_id":"4d2cd2415b3","author":"Luboslav Pivarc","date":"2024-10-29T23:15:33+01:00","line_no":65,"line":"\tRequiresNodeWithCPUManager           = Label(\"requires-node-with-cpu-manager\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":66,"line":"\tRequiresDualStackCluster             = Label(\"requires-dual-stack-cluster\")"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":67,"line":"\tRequiresHugepages2Mi                 = Label(\"requireHugepages2Mi\")"},{"commit_id":"41b6af99ae0","author":"Luboslav Pivarc","date":"2024-10-22T12:11:04+02:00","line_no":68,"line":"\tRequiresHugepages1Gi                 = Label(\"requireHugepages1Gi\")"},{"commit_id":"1c457abfa50","author":"Itamar Holder","date":"2023-09-20T12:23:36+03:00","line_no":69,"line":""},{"commit_id":"1c457abfa50","author":"Itamar Holder","date":"2023-09-20T12:23:36+03:00","line_no":70,"line":"\t// Storage classes"},{"commit_id":"804d4fdaa4e","author":"Alex Kalenyuk","date":"2024-10-29T21:14:22+02:00","line_no":71,"line":"\t// Requires a storage class with support for snapshots"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":72,"line":"\tRequiresSnapshotStorageClass = Label(\"RequiresSnapshotStorageClass\")"},{"commit_id":"1c457abfa50","author":"Itamar Holder","date":"2023-09-20T12:23:36+03:00","line_no":73,"line":"\t// Requires a storage class without support for snapshots"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":74,"line":"\tRequiresNoSnapshotStorageClass = Label(\"RequiresNoSnapshotStorageClass\")"},{"commit_id":"804d4fdaa4e","author":"Alex Kalenyuk","date":"2024-10-29T21:14:22+02:00","line_no":75,"line":"\t// Requires a storage class with ReadWriteMany Block support"},{"commit_id":"804d4fdaa4e","author":"Alex Kalenyuk","date":"2024-10-29T21:14:22+02:00","line_no":76,"line":"\tRequiresRWXBlock = Label(\"RequiresRWXBlock\")"},{"commit_id":"792ece7a174","author":"Luboslav Pivarc","date":"2024-12-02T12:45:58+01:00","line_no":77,"line":"\t// Requires the VMStateStorageClass to be set to ReadWriteOnce Filesystem storage class"},{"commit_id":"792ece7a174","author":"Luboslav Pivarc","date":"2024-12-02T12:45:58+01:00","line_no":78,"line":"\tRequiresRWOFsVMStateStorageClass = Label(\"RequiresRWOFsVMStateStorageClass\")"},{"commit_id":"792ece7a174","author":"Luboslav Pivarc","date":"2024-12-02T12:45:58+01:00","line_no":79,"line":"\t// Requires the VMStateStorageClass to be set to ReadWriteMany Filesystem storage class"},{"commit_id":"792ece7a174","author":"Luboslav Pivarc","date":"2024-12-02T12:45:58+01:00","line_no":80,"line":"\tRequiresRWXFsVMStateStorageClass = Label(\"RequiresRWXFsVMStateStorageClass\")"},{"commit_id":"792ece7a174","author":"Luboslav Pivarc","date":"2024-12-02T12:45:58+01:00","line_no":81,"line":""},{"commit_id":"ab4d1bb6cd1","author":"Alex Kalenyuk","date":"2024-10-29T21:26:11+02:00","line_no":82,"line":"\t// Requires a storage class with Block storage support"},{"commit_id":"ab4d1bb6cd1","author":"Alex Kalenyuk","date":"2024-10-29T21:26:11+02:00","line_no":83,"line":"\tRequiresBlockStorage = Label(\"RequiresBlockStorage\")"},{"commit_id":"a2344ac3425","author":"Alex Kalenyuk","date":"2025-01-05T12:43:23+02:00","line_no":84,"line":"\t// Tests that ensure sig-storage functionality which are conformance-unready"},{"commit_id":"a2344ac3425","author":"Alex Kalenyuk","date":"2025-01-05T12:43:23+02:00","line_no":85,"line":"\tStorageCritical = Label(\"StorageCritical\")"},{"commit_id":"67492ddcb8b","author":"Alex Kalenyuk","date":"2024-12-29T15:45:56+02:00","line_no":86,"line":"\t// Requires a storage class with volume expansion support"},{"commit_id":"67492ddcb8b","author":"Alex Kalenyuk","date":"2024-12-29T15:45:56+02:00","line_no":87,"line":"\tRequiresVolumeExpansion = Label(\"RequiresVolumeExpansion\")"},{"commit_id":"5fc09595bb8","author":"Luboslav Pivarc","date":"2024-05-30T10:37:24+02:00","line_no":88,"line":"\t// Kubernetes versions"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":89,"line":"\tKubernetes130 = Label(\"kubernetes130\")"},{"commit_id":"c99c6e1f510","author":"Vamsi Krishna Siddu","date":"2024-08-20T10:58:59+05:30","line_no":90,"line":"\t// WG archs"},{"commit_id":"dde8a54e620","author":"fossedihelm","date":"2024-08-27T15:44:29+02:00","line_no":91,"line":"\tWgS390x = Label(\"wg-s390x\")"},{"commit_id":"6ad869f3174","author":"howard zhang","date":"2024-12-20T14:54:59+08:00","line_no":92,"line":"\tWgArm64 = Label(\"wg-arm64\")"},{"commit_id":"1fe321dfd58","author":"Felix Matouschek","date":"2024-12-02T15:05:03+01:00","line_no":93,"line":"\t// Virtctl related tests"},{"commit_id":"1fe321dfd58","author":"Felix Matouschek","date":"2024-12-02T15:05:03+01:00","line_no":94,"line":"\tVirtctl = Label(\"virtctl\")"},{"commit_id":"60b5db4bd10","author":"Jed Lejosne","date":"2024-10-14T14:02:11-04:00","line_no":95,"line":""},{"commit_id":"60b5db4bd10","author":"Jed Lejosne","date":"2024-10-14T14:02:11-04:00","line_no":96,"line":"\t// NoFlakeChecker decorates tests that are not compatible with the check-tests-for-flakes test lane."},{"commit_id":"60b5db4bd10","author":"Jed Lejosne","date":"2024-10-14T14:02:11-04:00","line_no":97,"line":"\t// This should only be used for legitimate purposes, like on tests that have a flake-checker-friendly clone."},{"commit_id":"60b5db4bd10","author":"Jed Lejosne","date":"2024-10-14T14:02:11-04:00","line_no":98,"line":"\tNoFlakeCheck = Label(\"no-flake-check\")"},{"commit_id":"74442d9510e","author":"fossedihelm","date":"2022-11-29T16:50:13+01:00","line_no":99,"line":")"}],"tests/guestlog/guestlog.go":[{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":1,"line":"package guestlog"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":2,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":3,"line":"import ("},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":4,"line":"\t\"context\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":5,"line":"\t\"fmt\""},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":6,"line":"\t\"os\""},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":7,"line":"\t\"path/filepath\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":8,"line":"\t\"regexp\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":9,"line":"\t\"strconv\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":10,"line":"\t\"strings\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":11,"line":"\t\"time\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":12,"line":""},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":13,"line":"\texpect \"github.com/google/goexpect\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":14,"line":"\t. \"github.com/onsi/ginkgo/v2\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":15,"line":"\t. \"github.com/onsi/gomega\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":16,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":17,"line":"\tk8sv1 \"k8s.io/api/core/v1\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":18,"line":"\t\"k8s.io/apimachinery/pkg/api/resource\""},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":19,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":20,"line":"\tv1 \"kubevirt.io/api/core/v1\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":21,"line":""},{"commit_id":"1997db55a32","author":"Luboslav Pivarc","date":"2024-07-24T12:39:00+02:00","line_no":22,"line":"\t\"kubevirt.io/kubevirt/pkg/libvmi\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":23,"line":"\t\"kubevirt.io/kubevirt/pkg/pointer\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":24,"line":"\t\"kubevirt.io/kubevirt/tests/console\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":25,"line":"\t\"kubevirt.io/kubevirt/tests/decorators\""},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":26,"line":"\t\"kubevirt.io/kubevirt/tests/exec\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":27,"line":"\t\"kubevirt.io/kubevirt/tests/framework/kubevirt\""},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":28,"line":"\t\"kubevirt.io/kubevirt/tests/framework/matcher\""},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":29,"line":"\t\"kubevirt.io/kubevirt/tests/libpod\""},{"commit_id":"9ef681ea6f8","author":"Edward Haas","date":"2024-03-15T00:04:10+02:00","line_no":30,"line":"\t\"kubevirt.io/kubevirt/tests/libvmifact\""},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":31,"line":"\t\"kubevirt.io/kubevirt/tests/libvmops\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":32,"line":"\t\"kubevirt.io/kubevirt/tests/testsuite\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":33,"line":")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":34,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":35,"line":"const cirrosStartupTimeout = 60"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":36,"line":"const testString = \"GuestConsoleTest3413254123535234523\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":37,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":38,"line":"var _ = Describe(\"[sig-compute]Guest console log\", decorators.SigCompute, func() {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":39,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":40,"line":"\tvar ("},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":41,"line":"\t\tcirrosVmi *v1.VirtualMachineInstance"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":42,"line":"\t)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":43,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":44,"line":"\tBeforeEach(func() {"},{"commit_id":"1997db55a32","author":"Luboslav Pivarc","date":"2024-07-24T12:39:00+02:00","line_no":45,"line":"\t\tcirrosVmi = libvmifact.NewCirros(libvmi.WithLogSerialConsole(true))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":46,"line":"\t\tcirrosVmi.Spec.Domain.Devices.AutoattachSerialConsole = pointer.P(true)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":47,"line":"\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":48,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":49,"line":"\tDescribe(\"[level:component] Guest console log container\", func() {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":50,"line":"\t\tContext(\"set LogSerialConsole\", func() {"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":51,"line":"\t\t\tIt(\"it should exit cleanly when the shutdown is initiated by the guest\", func() {"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":52,"line":"\t\t\t\tBy(\"Starting a VMI\")"},{"commit_id":"2134542839d","author":"Alvaro Romero","date":"2024-08-01T13:48:59+02:00","line_no":53,"line":"\t\t\t\tvmi := libvmops.RunVMIAndExpectLaunch(cirrosVmi, cirrosStartupTimeout)"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":54,"line":""},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":55,"line":"\t\t\t\tBy(\"Finding virt-launcher pod\")"},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":56,"line":"\t\t\t\tvirtlauncherPod, err := libpod.GetPodByVirtualMachineInstance(vmi, testsuite.GetTestNamespace(vmi))"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":57,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":58,"line":"\t\t\t\tfoundContainer := false"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":59,"line":"\t\t\t\tfor _, container := range virtlauncherPod.Spec.Containers {"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":60,"line":"\t\t\t\t\tif container.Name == \"guest-console-log\" {"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":61,"line":"\t\t\t\t\t\tfoundContainer = true"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":62,"line":"\t\t\t\t\t}"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":63,"line":"\t\t\t\t}"},{"commit_id":"deefac55329","author":"stirabos","date":"2024-01-18T11:14:03+01:00","line_no":64,"line":"\t\t\t\tExpect(foundContainer).To(BeTrue())"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":65,"line":""},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":66,"line":"\t\t\t\tBy(\"Triggering a shutdown from the guest OS\")"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":67,"line":"\t\t\t\tExpect(console.LoginToCirros(vmi)).To(Succeed())"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":68,"line":"\t\t\t\tExpect(console.SafeExpectBatch(vmi, []expect.Batcher{"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":69,"line":"\t\t\t\t\t\u0026expect.BSnd{S: \"sudo poweroff\\n\"},"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":70,"line":"\t\t\t\t\t\u0026expect.BExp{R: \"The system is going down NOW!\"},"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":71,"line":"\t\t\t\t}, 240)).To(Succeed())"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":72,"line":""},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":73,"line":"\t\t\t\tBy(\"Ensuring virt-launcher pod is not reporting errors\")"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":74,"line":"\t\t\t\tEventually(func(g Gomega) {"},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":75,"line":"\t\t\t\t\tvirtlauncherPod, err := matcher.ThisPod(virtlauncherPod)()"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":76,"line":"\t\t\t\t\tg.Expect(err).ToNot(HaveOccurred())"},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":77,"line":"\t\t\t\t\tExpect(virtlauncherPod).ToNot(matcher.BeInPhase(k8sv1.PodFailed))"},{"commit_id":"0d45c14bfa4","author":"fossedihelm","date":"2024-11-29T08:50:10+01:00","line_no":78,"line":"\t\t\t\t\tg.Expect(virtlauncherPod).To(matcher.BeInPhase(k8sv1.PodSucceeded))"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":79,"line":"\t\t\t\t}, 60*time.Second, 1*time.Second).Should(Succeed(), \"virt-launcher should reach the PodSucceeded phase never hitting the PodFailed one\")"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":80,"line":"\t\t\t})"},{"commit_id":"a0edb234fcf","author":"stirabos","date":"2024-01-09T15:13:43+01:00","line_no":81,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":82,"line":"\t\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":83,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":84,"line":"\t\tContext(\"fetch logs\", func() {"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":85,"line":"\t\t\tvar vmi *v1.VirtualMachineInstance"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":86,"line":""},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":87,"line":"\t\t\tvar cirrosLogo = `"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":88,"line":"  ____               ____  ____"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":89,"line":" / __/ __ ____ ____ / __ \\/ __/"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":90,"line":"/ /__ / // __// __// /_/ /\\ \\ "},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":91,"line":"\\___//_//_/  /_/   \\____/___/ "},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":92,"line":"   http://cirros-cloud.net"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":93,"line":"`"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":94,"line":""},{"commit_id":"d5353536582","author":"Arnon Gilboa","date":"2024-11-06T11:37:00+02:00","line_no":95,"line":"\t\t\tIt(\"[QUARANTINE] it should fetch logs for a running VM with logs API\", decorators.Quarantine, func() {"},{"commit_id":"2134542839d","author":"Alvaro Romero","date":"2024-08-01T13:48:59+02:00","line_no":96,"line":"\t\t\t\tvmi = libvmops.RunVMIAndExpectLaunch(cirrosVmi, cirrosStartupTimeout)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":97,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":98,"line":"\t\t\t\tBy(\"Finding virt-launcher pod\")"},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":99,"line":"\t\t\t\tvirtlauncherPod, err := libpod.GetPodByVirtualMachineInstance(vmi, testsuite.GetTestNamespace(vmi))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":100,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":101,"line":""},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":102,"line":"\t\t\t\tBy(\"Getting logs with logs API and ensure the logs are correctly ordered with no unexpected line breaks\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":103,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":104,"line":"\t\t\t\tEventually(func(g Gomega) bool {"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":105,"line":"\t\t\t\t\tlogs, err := getConsoleLogs(virtlauncherPod)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":106,"line":"\t\t\t\t\tg.Expect(err).ToNot(HaveOccurred())"},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":107,"line":"\t\t\t\t\treturn strings.Contains(logs, cirrosLogo)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":108,"line":"\t\t\t\t}, cirrosStartupTimeout*time.Second, 2*time.Second).Should(BeTrue())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":109,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":110,"line":"\t\t\t\tBy(\"Obtaining the serial console, logging in and executing a command there\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":111,"line":"\t\t\t\tExpect(console.LoginToCirros(vmi)).To(Succeed())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":112,"line":"\t\t\t\tExpect(console.SafeExpectBatch(vmi, []expect.Batcher{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":113,"line":"\t\t\t\t\t\u0026expect.BSnd{S: \"echo \" + testString + \"\\n\"},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":114,"line":"\t\t\t\t\t\u0026expect.BExp{R: testString},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":115,"line":"\t\t\t\t}, 240)).To(Succeed())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":116,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":117,"line":"\t\t\t\tBy(\"Ensuring that log fetching is not breaking an open console\")"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":118,"line":"\t\t\t\texpecter, errChan, eerr := console.NewExpecter(kubevirt.Client(), vmi, 90*time.Second)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":119,"line":"\t\t\t\tExpect(eerr).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":120,"line":"\t\t\t\tif eerr == nil {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":121,"line":"\t\t\t\t\tdefer func() {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":122,"line":"\t\t\t\t\t\tderr := expecter.Close()"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":123,"line":"\t\t\t\t\t\tExpect(derr).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":124,"line":"\t\t\t\t\t}()"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":125,"line":"\t\t\t\t}"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":126,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":127,"line":"\t\t\t\tConsistently(errChan).ShouldNot(Receive())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":128,"line":""},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":129,"line":"\t\t\t\tlogs, err := getConsoleLogs(virtlauncherPod)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":130,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":131,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":132,"line":"\t\t\t\tBy(\"Ensuring that logs contain the login attempt\")"},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":133,"line":"\t\t\t\tExpect(logs).To(ContainSubstring(vmi.Name + \" login: cirros\"))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":134,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":135,"line":"\t\t\t\t// TODO: console.LoginToCirros is not systematically waiting for `\\u001b[8m` to prevent echoing the password, fix it first"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":136,"line":"\t\t\t\t// By(\"Ensuring that logs don't contain the login password\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":137,"line":"\t\t\t\t// Expect(outputString).ToNot(ContainSubstring(\"Password: gocubsgo\"))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":138,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":139,"line":"\t\t\t\tBy(\"Ensuring that logs contain the test command and its output\")"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":140,"line":"\t\t\t\tExpect(logs).To(ContainSubstring(\"echo \" + testString + \"\\n\"))"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":141,"line":"\t\t\t\tExpect(logs).To(ContainSubstring(\"\\n\" + testString + \"\\n\"))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":142,"line":"\t\t\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":143,"line":""},{"commit_id":"378d1f35137","author":"Simone Tiraboschi","date":"2024-08-14T16:20:38+02:00","line_no":144,"line":"\t\t\tIt(\"it should rotate the internal log files\", decorators.Periodic, func() {"},{"commit_id":"2134542839d","author":"Alvaro Romero","date":"2024-08-01T13:48:59+02:00","line_no":145,"line":"\t\t\t\tvmi = libvmops.RunVMIAndExpectLaunch(cirrosVmi, cirrosStartupTimeout)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":146,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":147,"line":"\t\t\t\tBy(\"Finding virt-launcher pod\")"},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":148,"line":"\t\t\t\tvirtlauncherPod, err := libpod.GetPodByVirtualMachineInstance(vmi, testsuite.GetTestNamespace(vmi))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":149,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":150,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":151,"line":"\t\t\t\tBy(\"Generating 9MB of log data to force log rotation and discarding\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":152,"line":"\t\t\t\tgenerateHugeLogData(vmi, 9)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":153,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":154,"line":"\t\t\t\tBy(\"Ensuring that log fetching is not failing\")"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":155,"line":"\t\t\t\t_, err = getConsoleLogs(virtlauncherPod)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":156,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":157,"line":""},{"commit_id":"cac6537c618","author":"stirabos","date":"2023-09-29T15:18:27+02:00","line_no":158,"line":"\t\t\t\tBy(\"Ensuring that we have 4 rotated log files (+term one)\")"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":159,"line":"\t\t\t\toutputString, err := exec.ExecuteCommandOnPod(virtlauncherPod, \"guest-console-log\", []string{\"/bin/ls\", \"-l\", fmt.Sprintf(\"/var/run/kubevirt-private/%v\", vmi.UID)})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":160,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"cac6537c618","author":"stirabos","date":"2023-09-29T15:18:27+02:00","line_no":161,"line":"\t\t\t\tExpect(strings.Count(outputString, \"virt-serial0-log\")).To(Equal(4 + 1))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":162,"line":"\t\t\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":163,"line":""},{"commit_id":"0beeaee05cd","author":"Daniel Hiller","date":"2024-12-13T19:06:25+01:00","line_no":164,"line":"\t\t\tIt(\"it should not skip any log line even trying to flood the serial console for QOSGuaranteed VMs\", decorators.Periodic, func() {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":165,"line":"\t\t\t\tcirrosVmi.Spec.Domain.Resources = v1.ResourceRequirements{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":166,"line":"\t\t\t\t\tRequests: k8sv1.ResourceList{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":167,"line":"\t\t\t\t\t\tk8sv1.ResourceCPU:    resource.MustParse(\"1000m\"),"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":168,"line":"\t\t\t\t\t\tk8sv1.ResourceMemory: resource.MustParse(\"256M\"),"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":169,"line":"\t\t\t\t\t},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":170,"line":"\t\t\t\t\tLimits: k8sv1.ResourceList{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":171,"line":"\t\t\t\t\t\tk8sv1.ResourceCPU:    resource.MustParse(\"1000m\"),"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":172,"line":"\t\t\t\t\t\tk8sv1.ResourceMemory: resource.MustParse(\"256M\"),"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":173,"line":"\t\t\t\t\t},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":174,"line":"\t\t\t\t}"},{"commit_id":"2134542839d","author":"Alvaro Romero","date":"2024-08-01T13:48:59+02:00","line_no":175,"line":"\t\t\t\tvmi = libvmops.RunVMIAndExpectLaunch(cirrosVmi, cirrosStartupTimeout)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":176,"line":"\t\t\t\tExpect(vmi.Status.QOSClass).ToNot(BeNil())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":177,"line":"\t\t\t\tExpect(*vmi.Status.QOSClass).To(Equal(k8sv1.PodQOSGuaranteed))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":178,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":179,"line":"\t\t\t\tBy(\"Finding virt-launcher pod\")"},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":180,"line":"\t\t\t\tvirtlauncherPod, err := libpod.GetPodByVirtualMachineInstance(vmi, testsuite.GetTestNamespace(vmi))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":181,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":182,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":183,"line":"\t\t\t\tBy(\"Generating 1MB of log data\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":184,"line":"\t\t\t\tgenerateHugeLogData(vmi, 1)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":185,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":186,"line":"\t\t\t\tBy(\"Ensuring that log fetching is not failing\")"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":187,"line":"\t\t\t\tlogs, err := getConsoleLogs(virtlauncherPod)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":188,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":189,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":190,"line":"\t\t\t\tBy(\"Checking that log lines are sequential with no gaps\")"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":191,"line":"\t\t\t\toutputLines := strings.Split(logs, \"\\n\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":192,"line":"\t\t\t\tExpect(len(outputLines)).To(BeNumerically(\"\u003e\", 1000))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":193,"line":"\t\t\t\tmatchingLines := 0"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":194,"line":"\t\t\t\tprevSeqn := -1"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":195,"line":"\t\t\t\tprevLine := \"\""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":196,"line":"\t\t\t\tr, err := regexp.Compile(`^logline (?P\u003cseqn\u003e\\d{7})\\s*`)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":197,"line":"\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":198,"line":"\t\t\t\tseqnIndex := r.SubexpIndex(\"seqn\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":199,"line":"\t\t\t\tfor _, line := range outputLines {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":200,"line":"\t\t\t\t\tif matches := r.FindStringSubmatch(line); len(matches) \u003e seqnIndex {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":201,"line":"\t\t\t\t\t\tseqnString := matches[seqnIndex]"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":202,"line":"\t\t\t\t\t\ti, err := strconv.Atoi(seqnString)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":203,"line":"\t\t\t\t\t\tExpect(err).ToNot(HaveOccurred())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":204,"line":"\t\t\t\t\t\tif prevSeqn \u003e 0 {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":205,"line":"\t\t\t\t\t\t\tExpect(i).To(Equal(prevSeqn+1), fmt.Sprintf(\"log line seq number should match previous+1: previous %d, current: %d.\\nprevLine: %s\\nline: %s\", prevSeqn, i, line, prevLine))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":206,"line":"\t\t\t\t\t\t}"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":207,"line":"\t\t\t\t\t\tprevSeqn = i"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":208,"line":"\t\t\t\t\t\tprevLine = line"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":209,"line":"\t\t\t\t\t\tmatchingLines = matchingLines + 1"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":210,"line":"\t\t\t\t\t}"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":211,"line":"\t\t\t\t}"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":212,"line":"\t\t\t\tExpect(matchingLines).To(BeNumerically(\"\u003e\", 1000))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":213,"line":"\t\t\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":214,"line":""},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":215,"line":"\t\t\tAfterEach(func() {"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":216,"line":"\t\t\t\tif CurrentSpecReport().Failed() {"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":217,"line":"\t\t\t\t\tif vmi != nil {"},{"commit_id":"c1b716a9abd","author":"Edward Haas","date":"2024-02-12T13:11:22+02:00","line_no":218,"line":"\t\t\t\t\t\tvirtlauncherPod, err := libpod.GetPodByVirtualMachineInstance(vmi, testsuite.GetTestNamespace(vmi))"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":219,"line":"\t\t\t\t\t\tif err == nil {"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":220,"line":"\t\t\t\t\t\t\tartifactsDir, _ := os.LookupEnv(\"ARTIFACTS\")"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":221,"line":"\t\t\t\t\t\t\toutputString, err := exec.ExecuteCommandOnPod(virtlauncherPod, \"guest-console-log\", []string{\"/bin/bash\", \"-c\", \"/bin/tail -v -n +1 \" + fmt.Sprintf(\"/var/run/kubevirt-private/%v/virt-serial*-log*\", vmi.UID)})"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":222,"line":"\t\t\t\t\t\t\tif err == nil {"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":223,"line":"\t\t\t\t\t\t\t\tlpath := filepath.Join(artifactsDir, fmt.Sprintf(\"serial_logs_content_%v.txt\", vmi.UID))"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":224,"line":"\t\t\t\t\t\t\t\t_, _ = fmt.Fprintf(GinkgoWriter, \"Serial console log failed, serial console logs dump from virt-launcher pod collected at file at %s\\n\", lpath)"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":225,"line":"\t\t\t\t\t\t\t\t_ = os.WriteFile(lpath, []byte(outputString), 0644)"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":226,"line":"\t\t\t\t\t\t\t}"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":227,"line":"\t\t\t\t\t\t}"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":228,"line":"\t\t\t\t\t}"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":229,"line":"\t\t\t\t}"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":230,"line":"\t\t\t})"},{"commit_id":"8d32fa6b916","author":"stirabos","date":"2023-11-29T12:51:33+01:00","line_no":231,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":232,"line":"\t\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":233,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":234,"line":"\t})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":235,"line":"})"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":236,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":237,"line":"func generateHugeLogData(vmi *v1.VirtualMachineInstance, mb int) {"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":238,"line":"\tBy(\"Obtaining the serial console, logging in\")"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":239,"line":"\tExpect(console.LoginToCirros(vmi)).To(Succeed())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":240,"line":"\tExpect(console.SafeExpectBatch(vmi, []expect.Batcher{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":241,"line":"\t\t\u0026expect.BSnd{S: \"echo \" + testString + \"\\n\"},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":242,"line":"\t\t\u0026expect.BExp{R: testString},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":243,"line":"\t}, 240)).To(Succeed())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":244,"line":""},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":245,"line":"\tBy(fmt.Sprintf(\"Generating about %dMB of data\", mb))"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":246,"line":"\t// (128 bytes/line) * (8 * 1024 * N) = N MB"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":247,"line":"\t// serial is expected to be at 115200 bps -\u003e 1MB takes 73 seconds"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":248,"line":"\tstartn := fmt.Sprintf(\"%07d\", 1)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":249,"line":"\tendn := fmt.Sprintf(\"%07d\", 8*1024*mb)"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":250,"line":"\tExpect(console.SafeExpectBatch(vmi, []expect.Batcher{"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":251,"line":"\t\t\u0026expect.BSnd{S: \"for num in $(seq -w \" + startn + \" \" + endn + \"); do echo \\\"logline ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num} ${num}\\\"; done\" + \"\\n\"},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":252,"line":"\t\t\u0026expect.BExp{R: \"logline \" + endn},"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":253,"line":"\t}, 240)).To(Succeed())"},{"commit_id":"b3a7be8e42e","author":"stirabos","date":"2023-08-29T17:34:24+02:00","line_no":254,"line":"}"},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":255,"line":""},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":256,"line":"func getConsoleLogs(virtlauncherPod *k8sv1.Pod) (string, error) {"},{"commit_id":"99cea57ae6b","author":"avlitman","date":"2024-03-03T17:06:34+02:00","line_no":257,"line":"\tlogsRaw, err := kubevirt.Client().CoreV1()."},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":258,"line":"\t\tPods(virtlauncherPod.Namespace)."},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":259,"line":"\t\tGetLogs(virtlauncherPod.Name, \u0026k8sv1.PodLogOptions{"},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":260,"line":"\t\t\tContainer: \"guest-console-log\","},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":261,"line":"\t\t})."},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":262,"line":"\t\tDoRaw(context.Background())"},{"commit_id":"260593665d3","author":"Vasiliy Ulyanov","date":"2023-11-16T10:06:02+01:00","line_no":263,"line":"\treturn strings.ReplaceAll(string(logsRaw), \"\\r\\n\", \"\\n\"), err"},{"commit_id":"6d1cb6a68f8","author":"stirabos","date":"2023-10-31T12:51:40+01:00","line_no":264,"line":"}"}]}
