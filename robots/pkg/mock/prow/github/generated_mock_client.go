// Code generated by MockGen. DO NOT EDIT.
// Source: /home/fgimenez/workspace/redhat/test-infra/prow/github/client.go

// Package github is a generated GoMock package.
package github

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	github "k8s.io/test-infra/prow/github"
)

// MocktimeClient is a mock of timeClient interface.
type MocktimeClient struct {
	ctrl     *gomock.Controller
	recorder *MocktimeClientMockRecorder
}

// MocktimeClientMockRecorder is the mock recorder for MocktimeClient.
type MocktimeClientMockRecorder struct {
	mock *MocktimeClient
}

// NewMocktimeClient creates a new mock instance.
func NewMocktimeClient(ctrl *gomock.Controller) *MocktimeClient {
	mock := &MocktimeClient{ctrl: ctrl}
	mock.recorder = &MocktimeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeClient) EXPECT() *MocktimeClientMockRecorder {
	return m.recorder
}

// Sleep mocks base method.
func (m *MocktimeClient) Sleep(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", arg0)
}

// Sleep indicates an expected call of Sleep.
func (mr *MocktimeClientMockRecorder) Sleep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MocktimeClient)(nil).Sleep), arg0)
}

// Until mocks base method.
func (m *MocktimeClient) Until(arg0 time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Until", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Until indicates an expected call of Until.
func (mr *MocktimeClientMockRecorder) Until(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Until", reflect.TypeOf((*MocktimeClient)(nil).Until), arg0)
}

// MockOrganizationClient is a mock of OrganizationClient interface.
type MockOrganizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationClientMockRecorder
}

// MockOrganizationClientMockRecorder is the mock recorder for MockOrganizationClient.
type MockOrganizationClientMockRecorder struct {
	mock *MockOrganizationClient
}

// NewMockOrganizationClient creates a new mock instance.
func NewMockOrganizationClient(ctrl *gomock.Controller) *MockOrganizationClient {
	mock := &MockOrganizationClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationClient) EXPECT() *MockOrganizationClientMockRecorder {
	return m.recorder
}

// EditOrg mocks base method.
func (m *MockOrganizationClient) EditOrg(name string, config github.Organization) (*github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrg", name, config)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditOrg indicates an expected call of EditOrg.
func (mr *MockOrganizationClientMockRecorder) EditOrg(name, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrg", reflect.TypeOf((*MockOrganizationClient)(nil).EditOrg), name, config)
}

// GetOrg mocks base method.
func (m *MockOrganizationClient) GetOrg(name string) (*github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", name)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockOrganizationClientMockRecorder) GetOrg(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockOrganizationClient)(nil).GetOrg), name)
}

// GetUserPermission mocks base method.
func (m *MockOrganizationClient) GetUserPermission(org, repo, user string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermission", org, repo, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermission indicates an expected call of GetUserPermission.
func (mr *MockOrganizationClientMockRecorder) GetUserPermission(org, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermission", reflect.TypeOf((*MockOrganizationClient)(nil).GetUserPermission), org, repo, user)
}

// HasPermission mocks base method.
func (m *MockOrganizationClient) HasPermission(org, repo, user string, roles ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{org, repo, user}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPermission", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockOrganizationClientMockRecorder) HasPermission(org, repo, user interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{org, repo, user}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockOrganizationClient)(nil).HasPermission), varargs...)
}

// IsMember mocks base method.
func (m *MockOrganizationClient) IsMember(org, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMember indicates an expected call of IsMember.
func (mr *MockOrganizationClientMockRecorder) IsMember(org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockOrganizationClient)(nil).IsMember), org, user)
}

// ListOrgInvitations mocks base method.
func (m *MockOrganizationClient) ListOrgInvitations(org string) ([]github.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgInvitations", org)
	ret0, _ := ret[0].([]github.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgInvitations indicates an expected call of ListOrgInvitations.
func (mr *MockOrganizationClientMockRecorder) ListOrgInvitations(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgInvitations", reflect.TypeOf((*MockOrganizationClient)(nil).ListOrgInvitations), org)
}

// ListOrgMembers mocks base method.
func (m *MockOrganizationClient) ListOrgMembers(org, role string) ([]github.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgMembers", org, role)
	ret0, _ := ret[0].([]github.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgMembers indicates an expected call of ListOrgMembers.
func (mr *MockOrganizationClientMockRecorder) ListOrgMembers(org, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgMembers", reflect.TypeOf((*MockOrganizationClient)(nil).ListOrgMembers), org, role)
}

// RemoveOrgMembership mocks base method.
func (m *MockOrganizationClient) RemoveOrgMembership(org, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrgMembership", org, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrgMembership indicates an expected call of RemoveOrgMembership.
func (mr *MockOrganizationClientMockRecorder) RemoveOrgMembership(org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrgMembership", reflect.TypeOf((*MockOrganizationClient)(nil).RemoveOrgMembership), org, user)
}

// UpdateOrgMembership mocks base method.
func (m *MockOrganizationClient) UpdateOrgMembership(org, user string, admin bool) (*github.OrgMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgMembership", org, user, admin)
	ret0, _ := ret[0].(*github.OrgMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgMembership indicates an expected call of UpdateOrgMembership.
func (mr *MockOrganizationClientMockRecorder) UpdateOrgMembership(org, user, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgMembership", reflect.TypeOf((*MockOrganizationClient)(nil).UpdateOrgMembership), org, user, admin)
}

// MockHookClient is a mock of HookClient interface.
type MockHookClient struct {
	ctrl     *gomock.Controller
	recorder *MockHookClientMockRecorder
}

// MockHookClientMockRecorder is the mock recorder for MockHookClient.
type MockHookClientMockRecorder struct {
	mock *MockHookClient
}

// NewMockHookClient creates a new mock instance.
func NewMockHookClient(ctrl *gomock.Controller) *MockHookClient {
	mock := &MockHookClient{ctrl: ctrl}
	mock.recorder = &MockHookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookClient) EXPECT() *MockHookClientMockRecorder {
	return m.recorder
}

// AcceptUserOrgInvitation mocks base method.
func (m *MockHookClient) AcceptUserOrgInvitation(org string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUserOrgInvitation", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptUserOrgInvitation indicates an expected call of AcceptUserOrgInvitation.
func (mr *MockHookClientMockRecorder) AcceptUserOrgInvitation(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUserOrgInvitation", reflect.TypeOf((*MockHookClient)(nil).AcceptUserOrgInvitation), org)
}

// AcceptUserRepoInvitation mocks base method.
func (m *MockHookClient) AcceptUserRepoInvitation(invitationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUserRepoInvitation", invitationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptUserRepoInvitation indicates an expected call of AcceptUserRepoInvitation.
func (mr *MockHookClientMockRecorder) AcceptUserRepoInvitation(invitationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUserRepoInvitation", reflect.TypeOf((*MockHookClient)(nil).AcceptUserRepoInvitation), invitationID)
}

// CreateOrgHook mocks base method.
func (m *MockHookClient) CreateOrgHook(org string, req github.HookRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgHook", org, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrgHook indicates an expected call of CreateOrgHook.
func (mr *MockHookClientMockRecorder) CreateOrgHook(org, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgHook", reflect.TypeOf((*MockHookClient)(nil).CreateOrgHook), org, req)
}

// CreateRepoHook mocks base method.
func (m *MockHookClient) CreateRepoHook(org, repo string, req github.HookRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoHook", org, repo, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoHook indicates an expected call of CreateRepoHook.
func (mr *MockHookClientMockRecorder) CreateRepoHook(org, repo, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoHook", reflect.TypeOf((*MockHookClient)(nil).CreateRepoHook), org, repo, req)
}

// DeleteOrgHook mocks base method.
func (m *MockHookClient) DeleteOrgHook(org string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgHook", org, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgHook indicates an expected call of DeleteOrgHook.
func (mr *MockHookClientMockRecorder) DeleteOrgHook(org, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgHook", reflect.TypeOf((*MockHookClient)(nil).DeleteOrgHook), org, id, req)
}

// DeleteRepoHook mocks base method.
func (m *MockHookClient) DeleteRepoHook(org, repo string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoHook", org, repo, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoHook indicates an expected call of DeleteRepoHook.
func (mr *MockHookClientMockRecorder) DeleteRepoHook(org, repo, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoHook", reflect.TypeOf((*MockHookClient)(nil).DeleteRepoHook), org, repo, id, req)
}

// EditOrgHook mocks base method.
func (m *MockHookClient) EditOrgHook(org string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrgHook", org, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrgHook indicates an expected call of EditOrgHook.
func (mr *MockHookClientMockRecorder) EditOrgHook(org, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrgHook", reflect.TypeOf((*MockHookClient)(nil).EditOrgHook), org, id, req)
}

// EditRepoHook mocks base method.
func (m *MockHookClient) EditRepoHook(org, repo string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRepoHook", org, repo, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRepoHook indicates an expected call of EditRepoHook.
func (mr *MockHookClientMockRecorder) EditRepoHook(org, repo, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRepoHook", reflect.TypeOf((*MockHookClient)(nil).EditRepoHook), org, repo, id, req)
}

// ListCurrentUserOrgInvitations mocks base method.
func (m *MockHookClient) ListCurrentUserOrgInvitations() ([]github.UserOrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrentUserOrgInvitations")
	ret0, _ := ret[0].([]github.UserOrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrentUserOrgInvitations indicates an expected call of ListCurrentUserOrgInvitations.
func (mr *MockHookClientMockRecorder) ListCurrentUserOrgInvitations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserOrgInvitations", reflect.TypeOf((*MockHookClient)(nil).ListCurrentUserOrgInvitations))
}

// ListCurrentUserRepoInvitations mocks base method.
func (m *MockHookClient) ListCurrentUserRepoInvitations() ([]github.UserRepoInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrentUserRepoInvitations")
	ret0, _ := ret[0].([]github.UserRepoInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrentUserRepoInvitations indicates an expected call of ListCurrentUserRepoInvitations.
func (mr *MockHookClientMockRecorder) ListCurrentUserRepoInvitations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserRepoInvitations", reflect.TypeOf((*MockHookClient)(nil).ListCurrentUserRepoInvitations))
}

// ListOrgHooks mocks base method.
func (m *MockHookClient) ListOrgHooks(org string) ([]github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgHooks", org)
	ret0, _ := ret[0].([]github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgHooks indicates an expected call of ListOrgHooks.
func (mr *MockHookClientMockRecorder) ListOrgHooks(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgHooks", reflect.TypeOf((*MockHookClient)(nil).ListOrgHooks), org)
}

// ListRepoHooks mocks base method.
func (m *MockHookClient) ListRepoHooks(org, repo string) ([]github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoHooks", org, repo)
	ret0, _ := ret[0].([]github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoHooks indicates an expected call of ListRepoHooks.
func (mr *MockHookClientMockRecorder) ListRepoHooks(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoHooks", reflect.TypeOf((*MockHookClient)(nil).ListRepoHooks), org, repo)
}

// MockCommentClient is a mock of CommentClient interface.
type MockCommentClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommentClientMockRecorder
}

// MockCommentClientMockRecorder is the mock recorder for MockCommentClient.
type MockCommentClientMockRecorder struct {
	mock *MockCommentClient
}

// NewMockCommentClient creates a new mock instance.
func NewMockCommentClient(ctrl *gomock.Controller) *MockCommentClient {
	mock := &MockCommentClient{ctrl: ctrl}
	mock.recorder = &MockCommentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentClient) EXPECT() *MockCommentClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentClient) CreateComment(org, repo string, number int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", org, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentClientMockRecorder) CreateComment(org, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentClient)(nil).CreateComment), org, repo, number, comment)
}

// CreateCommentReaction mocks base method.
func (m *MockCommentClient) CreateCommentReaction(org, repo string, id int, reaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReaction", org, repo, id, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentReaction indicates an expected call of CreateCommentReaction.
func (mr *MockCommentClientMockRecorder) CreateCommentReaction(org, repo, id, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReaction", reflect.TypeOf((*MockCommentClient)(nil).CreateCommentReaction), org, repo, id, reaction)
}

// CreateCommentWithContext mocks base method.
func (m *MockCommentClient) CreateCommentWithContext(ctx context.Context, org, repo string, number int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentWithContext", ctx, org, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentWithContext indicates an expected call of CreateCommentWithContext.
func (mr *MockCommentClientMockRecorder) CreateCommentWithContext(ctx, org, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentWithContext", reflect.TypeOf((*MockCommentClient)(nil).CreateCommentWithContext), ctx, org, repo, number, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentClient) DeleteComment(org, repo string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", org, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentClientMockRecorder) DeleteComment(org, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentClient)(nil).DeleteComment), org, repo, id)
}

// DeleteCommentWithContext mocks base method.
func (m *MockCommentClient) DeleteCommentWithContext(ctx context.Context, org, repo string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentWithContext", ctx, org, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentWithContext indicates an expected call of DeleteCommentWithContext.
func (mr *MockCommentClientMockRecorder) DeleteCommentWithContext(ctx, org, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentWithContext", reflect.TypeOf((*MockCommentClient)(nil).DeleteCommentWithContext), ctx, org, repo, id)
}

// DeleteStaleComments mocks base method.
func (m *MockCommentClient) DeleteStaleComments(org, repo string, number int, comments []github.IssueComment, isStale func(github.IssueComment) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaleComments", org, repo, number, comments, isStale)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaleComments indicates an expected call of DeleteStaleComments.
func (mr *MockCommentClientMockRecorder) DeleteStaleComments(org, repo, number, comments, isStale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaleComments", reflect.TypeOf((*MockCommentClient)(nil).DeleteStaleComments), org, repo, number, comments, isStale)
}

// DeleteStaleCommentsWithContext mocks base method.
func (m *MockCommentClient) DeleteStaleCommentsWithContext(ctx context.Context, org, repo string, number int, comments []github.IssueComment, isStale func(github.IssueComment) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaleCommentsWithContext", ctx, org, repo, number, comments, isStale)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaleCommentsWithContext indicates an expected call of DeleteStaleCommentsWithContext.
func (mr *MockCommentClientMockRecorder) DeleteStaleCommentsWithContext(ctx, org, repo, number, comments, isStale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaleCommentsWithContext", reflect.TypeOf((*MockCommentClient)(nil).DeleteStaleCommentsWithContext), ctx, org, repo, number, comments, isStale)
}

// EditComment mocks base method.
func (m *MockCommentClient) EditComment(org, repo string, id int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", org, repo, id, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCommentClientMockRecorder) EditComment(org, repo, id, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCommentClient)(nil).EditComment), org, repo, id, comment)
}

// MockIssueClient is a mock of IssueClient interface.
type MockIssueClient struct {
	ctrl     *gomock.Controller
	recorder *MockIssueClientMockRecorder
}

// MockIssueClientMockRecorder is the mock recorder for MockIssueClient.
type MockIssueClientMockRecorder struct {
	mock *MockIssueClient
}

// NewMockIssueClient creates a new mock instance.
func NewMockIssueClient(ctrl *gomock.Controller) *MockIssueClient {
	mock := &MockIssueClient{ctrl: ctrl}
	mock.recorder = &MockIssueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueClient) EXPECT() *MockIssueClientMockRecorder {
	return m.recorder
}

// AssignIssue mocks base method.
func (m *MockIssueClient) AssignIssue(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignIssue", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignIssue indicates an expected call of AssignIssue.
func (mr *MockIssueClientMockRecorder) AssignIssue(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignIssue", reflect.TypeOf((*MockIssueClient)(nil).AssignIssue), org, repo, number, logins)
}

// CloseIssue mocks base method.
func (m *MockIssueClient) CloseIssue(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIssue", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIssue indicates an expected call of CloseIssue.
func (mr *MockIssueClientMockRecorder) CloseIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIssue", reflect.TypeOf((*MockIssueClient)(nil).CloseIssue), org, repo, number)
}

// CreateIssue mocks base method.
func (m *MockIssueClient) CreateIssue(org, repo, title, body string, milestone int, labels, assignees []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", org, repo, title, body, milestone, labels, assignees)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockIssueClientMockRecorder) CreateIssue(org, repo, title, body, milestone, labels, assignees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockIssueClient)(nil).CreateIssue), org, repo, title, body, milestone, labels, assignees)
}

// CreateIssueReaction mocks base method.
func (m *MockIssueClient) CreateIssueReaction(org, repo string, id int, reaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueReaction", org, repo, id, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssueReaction indicates an expected call of CreateIssueReaction.
func (mr *MockIssueClientMockRecorder) CreateIssueReaction(org, repo, id, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueReaction", reflect.TypeOf((*MockIssueClient)(nil).CreateIssueReaction), org, repo, id, reaction)
}

// EditIssue mocks base method.
func (m *MockIssueClient) EditIssue(org, repo string, number int, issue *github.Issue) (*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditIssue", org, repo, number, issue)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditIssue indicates an expected call of EditIssue.
func (mr *MockIssueClientMockRecorder) EditIssue(org, repo, number, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditIssue", reflect.TypeOf((*MockIssueClient)(nil).EditIssue), org, repo, number, issue)
}

// FindIssues mocks base method.
func (m *MockIssueClient) FindIssues(query, sort string, asc bool) ([]github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIssues", query, sort, asc)
	ret0, _ := ret[0].([]github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIssues indicates an expected call of FindIssues.
func (mr *MockIssueClientMockRecorder) FindIssues(query, sort, asc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIssues", reflect.TypeOf((*MockIssueClient)(nil).FindIssues), query, sort, asc)
}

// GetIssue mocks base method.
func (m *MockIssueClient) GetIssue(org, repo string, number int) (*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", org, repo, number)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockIssueClientMockRecorder) GetIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockIssueClient)(nil).GetIssue), org, repo, number)
}

// GetIssueLabels mocks base method.
func (m *MockIssueClient) GetIssueLabels(org, repo string, number int) ([]github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueLabels", org, repo, number)
	ret0, _ := ret[0].([]github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueLabels indicates an expected call of GetIssueLabels.
func (mr *MockIssueClientMockRecorder) GetIssueLabels(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLabels", reflect.TypeOf((*MockIssueClient)(nil).GetIssueLabels), org, repo, number)
}

// ListIssueComments mocks base method.
func (m *MockIssueClient) ListIssueComments(org, repo string, number int) ([]github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueComments", org, repo, number)
	ret0, _ := ret[0].([]github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueComments indicates an expected call of ListIssueComments.
func (mr *MockIssueClientMockRecorder) ListIssueComments(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueComments", reflect.TypeOf((*MockIssueClient)(nil).ListIssueComments), org, repo, number)
}

// ListIssueCommentsWithContext mocks base method.
func (m *MockIssueClient) ListIssueCommentsWithContext(ctx context.Context, org, repo string, number int) ([]github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueCommentsWithContext", ctx, org, repo, number)
	ret0, _ := ret[0].([]github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueCommentsWithContext indicates an expected call of ListIssueCommentsWithContext.
func (mr *MockIssueClientMockRecorder) ListIssueCommentsWithContext(ctx, org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueCommentsWithContext", reflect.TypeOf((*MockIssueClient)(nil).ListIssueCommentsWithContext), ctx, org, repo, number)
}

// ListIssueEvents mocks base method.
func (m *MockIssueClient) ListIssueEvents(org, repo string, num int) ([]github.ListedIssueEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEvents", org, repo, num)
	ret0, _ := ret[0].([]github.ListedIssueEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueEvents indicates an expected call of ListIssueEvents.
func (mr *MockIssueClientMockRecorder) ListIssueEvents(org, repo, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEvents", reflect.TypeOf((*MockIssueClient)(nil).ListIssueEvents), org, repo, num)
}

// ListOpenIssues mocks base method.
func (m *MockIssueClient) ListOpenIssues(org, repo string) ([]github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenIssues", org, repo)
	ret0, _ := ret[0].([]github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenIssues indicates an expected call of ListOpenIssues.
func (mr *MockIssueClientMockRecorder) ListOpenIssues(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenIssues", reflect.TypeOf((*MockIssueClient)(nil).ListOpenIssues), org, repo)
}

// ReopenIssue mocks base method.
func (m *MockIssueClient) ReopenIssue(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReopenIssue", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReopenIssue indicates an expected call of ReopenIssue.
func (mr *MockIssueClientMockRecorder) ReopenIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenIssue", reflect.TypeOf((*MockIssueClient)(nil).ReopenIssue), org, repo, number)
}

// UnassignIssue mocks base method.
func (m *MockIssueClient) UnassignIssue(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignIssue", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignIssue indicates an expected call of UnassignIssue.
func (mr *MockIssueClientMockRecorder) UnassignIssue(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignIssue", reflect.TypeOf((*MockIssueClient)(nil).UnassignIssue), org, repo, number, logins)
}

// MockPullRequestClient is a mock of PullRequestClient interface.
type MockPullRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestClientMockRecorder
}

// MockPullRequestClientMockRecorder is the mock recorder for MockPullRequestClient.
type MockPullRequestClientMockRecorder struct {
	mock *MockPullRequestClient
}

// NewMockPullRequestClient creates a new mock instance.
func NewMockPullRequestClient(ctrl *gomock.Controller) *MockPullRequestClient {
	mock := &MockPullRequestClient{ctrl: ctrl}
	mock.recorder = &MockPullRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestClient) EXPECT() *MockPullRequestClientMockRecorder {
	return m.recorder
}

// ClosePR mocks base method.
func (m *MockPullRequestClient) ClosePR(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePR", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePR indicates an expected call of ClosePR.
func (mr *MockPullRequestClientMockRecorder) ClosePR(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePR", reflect.TypeOf((*MockPullRequestClient)(nil).ClosePR), org, repo, number)
}

// CreatePullRequest mocks base method.
func (m *MockPullRequestClient) CreatePullRequest(org, repo, title, body, head, base string, canModify bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", org, repo, title, body, head, base, canModify)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockPullRequestClientMockRecorder) CreatePullRequest(org, repo, title, body, head, base, canModify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockPullRequestClient)(nil).CreatePullRequest), org, repo, title, body, head, base, canModify)
}

// CreatePullRequestReviewComment mocks base method.
func (m *MockPullRequestClient) CreatePullRequestReviewComment(org, repo string, number int, rc github.ReviewComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestReviewComment", org, repo, number, rc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePullRequestReviewComment indicates an expected call of CreatePullRequestReviewComment.
func (mr *MockPullRequestClientMockRecorder) CreatePullRequestReviewComment(org, repo, number, rc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestReviewComment", reflect.TypeOf((*MockPullRequestClient)(nil).CreatePullRequestReviewComment), org, repo, number, rc)
}

// CreateReview mocks base method.
func (m *MockPullRequestClient) CreateReview(org, repo string, number int, r github.DraftReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", org, repo, number, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockPullRequestClientMockRecorder) CreateReview(org, repo, number, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockPullRequestClient)(nil).CreateReview), org, repo, number, r)
}

// EditPullRequest mocks base method.
func (m *MockPullRequestClient) EditPullRequest(org, repo string, number int, pr *github.PullRequest) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPullRequest", org, repo, number, pr)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPullRequest indicates an expected call of EditPullRequest.
func (mr *MockPullRequestClientMockRecorder) EditPullRequest(org, repo, number, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPullRequest", reflect.TypeOf((*MockPullRequestClient)(nil).EditPullRequest), org, repo, number, pr)
}

// GetPullRequest mocks base method.
func (m *MockPullRequestClient) GetPullRequest(org, repo string, number int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", org, repo, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockPullRequestClientMockRecorder) GetPullRequest(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockPullRequestClient)(nil).GetPullRequest), org, repo, number)
}

// GetPullRequestChanges mocks base method.
func (m *MockPullRequestClient) GetPullRequestChanges(org, repo string, number int) ([]github.PullRequestChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestChanges", org, repo, number)
	ret0, _ := ret[0].([]github.PullRequestChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestChanges indicates an expected call of GetPullRequestChanges.
func (mr *MockPullRequestClientMockRecorder) GetPullRequestChanges(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestChanges", reflect.TypeOf((*MockPullRequestClient)(nil).GetPullRequestChanges), org, repo, number)
}

// GetPullRequestPatch mocks base method.
func (m *MockPullRequestClient) GetPullRequestPatch(org, repo string, number int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestPatch", org, repo, number)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestPatch indicates an expected call of GetPullRequestPatch.
func (mr *MockPullRequestClientMockRecorder) GetPullRequestPatch(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestPatch", reflect.TypeOf((*MockPullRequestClient)(nil).GetPullRequestPatch), org, repo, number)
}

// GetPullRequests mocks base method.
func (m *MockPullRequestClient) GetPullRequests(org, repo string) ([]github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", org, repo)
	ret0, _ := ret[0].([]github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockPullRequestClientMockRecorder) GetPullRequests(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockPullRequestClient)(nil).GetPullRequests), org, repo)
}

// IsMergeable mocks base method.
func (m *MockPullRequestClient) IsMergeable(org, repo string, number int, SHA string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMergeable", org, repo, number, SHA)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMergeable indicates an expected call of IsMergeable.
func (mr *MockPullRequestClientMockRecorder) IsMergeable(org, repo, number, SHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMergeable", reflect.TypeOf((*MockPullRequestClient)(nil).IsMergeable), org, repo, number, SHA)
}

// ListPRCommits mocks base method.
func (m *MockPullRequestClient) ListPRCommits(org, repo string, number int) ([]github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPRCommits", org, repo, number)
	ret0, _ := ret[0].([]github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPRCommits indicates an expected call of ListPRCommits.
func (mr *MockPullRequestClientMockRecorder) ListPRCommits(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPRCommits", reflect.TypeOf((*MockPullRequestClient)(nil).ListPRCommits), org, repo, number)
}

// ListPullRequestComments mocks base method.
func (m *MockPullRequestClient) ListPullRequestComments(org, repo string, number int) ([]github.ReviewComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComments", org, repo, number)
	ret0, _ := ret[0].([]github.ReviewComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComments indicates an expected call of ListPullRequestComments.
func (mr *MockPullRequestClientMockRecorder) ListPullRequestComments(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComments", reflect.TypeOf((*MockPullRequestClient)(nil).ListPullRequestComments), org, repo, number)
}

// ListReviews mocks base method.
func (m *MockPullRequestClient) ListReviews(org, repo string, number int) ([]github.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", org, repo, number)
	ret0, _ := ret[0].([]github.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockPullRequestClientMockRecorder) ListReviews(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockPullRequestClient)(nil).ListReviews), org, repo, number)
}

// Merge mocks base method.
func (m *MockPullRequestClient) Merge(org, repo string, pr int, details github.MergeDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", org, repo, pr, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockPullRequestClientMockRecorder) Merge(org, repo, pr, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPullRequestClient)(nil).Merge), org, repo, pr, details)
}

// ReopenPR mocks base method.
func (m *MockPullRequestClient) ReopenPR(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReopenPR", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReopenPR indicates an expected call of ReopenPR.
func (mr *MockPullRequestClientMockRecorder) ReopenPR(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenPR", reflect.TypeOf((*MockPullRequestClient)(nil).ReopenPR), org, repo, number)
}

// RequestReview mocks base method.
func (m *MockPullRequestClient) RequestReview(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReview", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReview indicates an expected call of RequestReview.
func (mr *MockPullRequestClientMockRecorder) RequestReview(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReview", reflect.TypeOf((*MockPullRequestClient)(nil).RequestReview), org, repo, number, logins)
}

// UnrequestReview mocks base method.
func (m *MockPullRequestClient) UnrequestReview(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnrequestReview", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnrequestReview indicates an expected call of UnrequestReview.
func (mr *MockPullRequestClientMockRecorder) UnrequestReview(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrequestReview", reflect.TypeOf((*MockPullRequestClient)(nil).UnrequestReview), org, repo, number, logins)
}

// UpdatePullRequest mocks base method.
func (m *MockPullRequestClient) UpdatePullRequest(org, repo string, number int, title, body *string, open *bool, branch *string, canModify *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequest", org, repo, number, title, body, open, branch, canModify)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequest indicates an expected call of UpdatePullRequest.
func (mr *MockPullRequestClientMockRecorder) UpdatePullRequest(org, repo, number, title, body, open, branch, canModify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequest", reflect.TypeOf((*MockPullRequestClient)(nil).UpdatePullRequest), org, repo, number, title, body, open, branch, canModify)
}

// UpdatePullRequestBranch mocks base method.
func (m *MockPullRequestClient) UpdatePullRequestBranch(org, repo string, number int, expectedHeadSha *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestBranch", org, repo, number, expectedHeadSha)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestBranch indicates an expected call of UpdatePullRequestBranch.
func (mr *MockPullRequestClientMockRecorder) UpdatePullRequestBranch(org, repo, number, expectedHeadSha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestBranch", reflect.TypeOf((*MockPullRequestClient)(nil).UpdatePullRequestBranch), org, repo, number, expectedHeadSha)
}

// MockCommitClient is a mock of CommitClient interface.
type MockCommitClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommitClientMockRecorder
}

// MockCommitClientMockRecorder is the mock recorder for MockCommitClient.
type MockCommitClientMockRecorder struct {
	mock *MockCommitClient
}

// NewMockCommitClient creates a new mock instance.
func NewMockCommitClient(ctrl *gomock.Controller) *MockCommitClient {
	mock := &MockCommitClient{ctrl: ctrl}
	mock.recorder = &MockCommitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitClient) EXPECT() *MockCommitClientMockRecorder {
	return m.recorder
}

// CreateStatus mocks base method.
func (m *MockCommitClient) CreateStatus(org, repo, SHA string, s github.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", org, repo, SHA, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockCommitClientMockRecorder) CreateStatus(org, repo, SHA, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockCommitClient)(nil).CreateStatus), org, repo, SHA, s)
}

// DeleteRef mocks base method.
func (m *MockCommitClient) DeleteRef(org, repo, ref string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRef", org, repo, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRef indicates an expected call of DeleteRef.
func (mr *MockCommitClientMockRecorder) DeleteRef(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRef", reflect.TypeOf((*MockCommitClient)(nil).DeleteRef), org, repo, ref)
}

// GetCombinedStatus mocks base method.
func (m *MockCommitClient) GetCombinedStatus(org, repo, ref string) (*github.CombinedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedStatus", org, repo, ref)
	ret0, _ := ret[0].(*github.CombinedStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedStatus indicates an expected call of GetCombinedStatus.
func (mr *MockCommitClientMockRecorder) GetCombinedStatus(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedStatus", reflect.TypeOf((*MockCommitClient)(nil).GetCombinedStatus), org, repo, ref)
}

// GetRef mocks base method.
func (m *MockCommitClient) GetRef(org, repo, ref string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", org, repo, ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRef indicates an expected call of GetRef.
func (mr *MockCommitClientMockRecorder) GetRef(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockCommitClient)(nil).GetRef), org, repo, ref)
}

// GetSingleCommit mocks base method.
func (m *MockCommitClient) GetSingleCommit(org, repo, SHA string) (github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCommit", org, repo, SHA)
	ret0, _ := ret[0].(github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCommit indicates an expected call of GetSingleCommit.
func (mr *MockCommitClientMockRecorder) GetSingleCommit(org, repo, SHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCommit", reflect.TypeOf((*MockCommitClient)(nil).GetSingleCommit), org, repo, SHA)
}

// ListCheckRuns mocks base method.
func (m *MockCommitClient) ListCheckRuns(org, repo, ref string) (*github.CheckRunList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRuns", org, repo, ref)
	ret0, _ := ret[0].(*github.CheckRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckRuns indicates an expected call of ListCheckRuns.
func (mr *MockCommitClientMockRecorder) ListCheckRuns(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRuns", reflect.TypeOf((*MockCommitClient)(nil).ListCheckRuns), org, repo, ref)
}

// ListFileCommits mocks base method.
func (m *MockCommitClient) ListFileCommits(org, repo, path string) ([]github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFileCommits", org, repo, path)
	ret0, _ := ret[0].([]github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileCommits indicates an expected call of ListFileCommits.
func (mr *MockCommitClientMockRecorder) ListFileCommits(org, repo, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileCommits", reflect.TypeOf((*MockCommitClient)(nil).ListFileCommits), org, repo, path)
}

// ListStatuses mocks base method.
func (m *MockCommitClient) ListStatuses(org, repo, ref string) ([]github.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatuses", org, repo, ref)
	ret0, _ := ret[0].([]github.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatuses indicates an expected call of ListStatuses.
func (mr *MockCommitClientMockRecorder) ListStatuses(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatuses", reflect.TypeOf((*MockCommitClient)(nil).ListStatuses), org, repo, ref)
}

// MockRepositoryClient is a mock of RepositoryClient interface.
type MockRepositoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryClientMockRecorder
}

// MockRepositoryClientMockRecorder is the mock recorder for MockRepositoryClient.
type MockRepositoryClientMockRecorder struct {
	mock *MockRepositoryClient
}

// NewMockRepositoryClient creates a new mock instance.
func NewMockRepositoryClient(ctrl *gomock.Controller) *MockRepositoryClient {
	mock := &MockRepositoryClient{ctrl: ctrl}
	mock.recorder = &MockRepositoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryClient) EXPECT() *MockRepositoryClientMockRecorder {
	return m.recorder
}

// AddLabel mocks base method.
func (m *MockRepositoryClient) AddLabel(org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockRepositoryClientMockRecorder) AddLabel(org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockRepositoryClient)(nil).AddLabel), org, repo, number, label)
}

// AddLabelWithContext mocks base method.
func (m *MockRepositoryClient) AddLabelWithContext(ctx context.Context, org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelWithContext", ctx, org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelWithContext indicates an expected call of AddLabelWithContext.
func (mr *MockRepositoryClientMockRecorder) AddLabelWithContext(ctx, org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelWithContext", reflect.TypeOf((*MockRepositoryClient)(nil).AddLabelWithContext), ctx, org, repo, number, label)
}

// AddLabels mocks base method.
func (m *MockRepositoryClient) AddLabels(org, repo string, number int, labels ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{org, repo, number}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabels indicates an expected call of AddLabels.
func (mr *MockRepositoryClientMockRecorder) AddLabels(org, repo, number interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{org, repo, number}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*MockRepositoryClient)(nil).AddLabels), varargs...)
}

// AddLabelsWithContext mocks base method.
func (m *MockRepositoryClient) AddLabelsWithContext(ctx context.Context, org, repo string, number int, labels ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, org, repo, number}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabelsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelsWithContext indicates an expected call of AddLabelsWithContext.
func (mr *MockRepositoryClientMockRecorder) AddLabelsWithContext(ctx, org, repo, number interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, org, repo, number}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelsWithContext", reflect.TypeOf((*MockRepositoryClient)(nil).AddLabelsWithContext), varargs...)
}

// AddRepoLabel mocks base method.
func (m *MockRepositoryClient) AddRepoLabel(org, repo, label, description, color string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepoLabel", org, repo, label, description, color)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepoLabel indicates an expected call of AddRepoLabel.
func (mr *MockRepositoryClientMockRecorder) AddRepoLabel(org, repo, label, description, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepoLabel", reflect.TypeOf((*MockRepositoryClient)(nil).AddRepoLabel), org, repo, label, description, color)
}

// CreateFork mocks base method.
func (m *MockRepositoryClient) CreateFork(owner, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFork", owner, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFork indicates an expected call of CreateFork.
func (mr *MockRepositoryClientMockRecorder) CreateFork(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFork", reflect.TypeOf((*MockRepositoryClient)(nil).CreateFork), owner, repo)
}

// CreateRepo mocks base method.
func (m *MockRepositoryClient) CreateRepo(owner string, isUser bool, repo github.RepoCreateRequest) (*github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", owner, isUser, repo)
	ret0, _ := ret[0].(*github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockRepositoryClientMockRecorder) CreateRepo(owner, isUser, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockRepositoryClient)(nil).CreateRepo), owner, isUser, repo)
}

// DeleteRepoLabel mocks base method.
func (m *MockRepositoryClient) DeleteRepoLabel(org, repo, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoLabel", org, repo, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoLabel indicates an expected call of DeleteRepoLabel.
func (mr *MockRepositoryClientMockRecorder) DeleteRepoLabel(org, repo, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoLabel", reflect.TypeOf((*MockRepositoryClient)(nil).DeleteRepoLabel), org, repo, label)
}

// EnsureFork mocks base method.
func (m *MockRepositoryClient) EnsureFork(forkingUser, org, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFork", forkingUser, org, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureFork indicates an expected call of EnsureFork.
func (mr *MockRepositoryClientMockRecorder) EnsureFork(forkingUser, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFork", reflect.TypeOf((*MockRepositoryClient)(nil).EnsureFork), forkingUser, org, repo)
}

// GetBranchProtection mocks base method.
func (m *MockRepositoryClient) GetBranchProtection(org, repo, branch string) (*github.BranchProtection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", org, repo, branch)
	ret0, _ := ret[0].(*github.BranchProtection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockRepositoryClientMockRecorder) GetBranchProtection(org, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockRepositoryClient)(nil).GetBranchProtection), org, repo, branch)
}

// GetBranches mocks base method.
func (m *MockRepositoryClient) GetBranches(org, repo string, onlyProtected bool) ([]github.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", org, repo, onlyProtected)
	ret0, _ := ret[0].([]github.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockRepositoryClientMockRecorder) GetBranches(org, repo, onlyProtected interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockRepositoryClient)(nil).GetBranches), org, repo, onlyProtected)
}

// GetDirectory mocks base method.
func (m *MockRepositoryClient) GetDirectory(org, repo, dirpath, commit string) ([]github.DirectoryContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectory", org, repo, dirpath, commit)
	ret0, _ := ret[0].([]github.DirectoryContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockRepositoryClientMockRecorder) GetDirectory(org, repo, dirpath, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockRepositoryClient)(nil).GetDirectory), org, repo, dirpath, commit)
}

// GetFile mocks base method.
func (m *MockRepositoryClient) GetFile(org, repo, filepath, commit string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", org, repo, filepath, commit)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockRepositoryClientMockRecorder) GetFile(org, repo, filepath, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockRepositoryClient)(nil).GetFile), org, repo, filepath, commit)
}

// GetRepo mocks base method.
func (m *MockRepositoryClient) GetRepo(owner, name string) (github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", owner, name)
	ret0, _ := ret[0].(github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockRepositoryClientMockRecorder) GetRepo(owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRepositoryClient)(nil).GetRepo), owner, name)
}

// GetRepoLabels mocks base method.
func (m *MockRepositoryClient) GetRepoLabels(org, repo string) ([]github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoLabels", org, repo)
	ret0, _ := ret[0].([]github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoLabels indicates an expected call of GetRepoLabels.
func (mr *MockRepositoryClientMockRecorder) GetRepoLabels(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoLabels", reflect.TypeOf((*MockRepositoryClient)(nil).GetRepoLabels), org, repo)
}

// GetRepos mocks base method.
func (m *MockRepositoryClient) GetRepos(org string, isUser bool) ([]github.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepos", org, isUser)
	ret0, _ := ret[0].([]github.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepos indicates an expected call of GetRepos.
func (mr *MockRepositoryClientMockRecorder) GetRepos(org, isUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepos", reflect.TypeOf((*MockRepositoryClient)(nil).GetRepos), org, isUser)
}

// IsCollaborator mocks base method.
func (m *MockRepositoryClient) IsCollaborator(org, repo, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", org, repo, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockRepositoryClientMockRecorder) IsCollaborator(org, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockRepositoryClient)(nil).IsCollaborator), org, repo, user)
}

// ListCollaborators mocks base method.
func (m *MockRepositoryClient) ListCollaborators(org, repo string) ([]github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborators", org, repo)
	ret0, _ := ret[0].([]github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollaborators indicates an expected call of ListCollaborators.
func (mr *MockRepositoryClientMockRecorder) ListCollaborators(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborators", reflect.TypeOf((*MockRepositoryClient)(nil).ListCollaborators), org, repo)
}

// ListRepoTeams mocks base method.
func (m *MockRepositoryClient) ListRepoTeams(org, repo string) ([]github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoTeams", org, repo)
	ret0, _ := ret[0].([]github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoTeams indicates an expected call of ListRepoTeams.
func (mr *MockRepositoryClientMockRecorder) ListRepoTeams(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoTeams", reflect.TypeOf((*MockRepositoryClient)(nil).ListRepoTeams), org, repo)
}

// RemoveBranchProtection mocks base method.
func (m *MockRepositoryClient) RemoveBranchProtection(org, repo, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranchProtection", org, repo, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBranchProtection indicates an expected call of RemoveBranchProtection.
func (mr *MockRepositoryClientMockRecorder) RemoveBranchProtection(org, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranchProtection", reflect.TypeOf((*MockRepositoryClient)(nil).RemoveBranchProtection), org, repo, branch)
}

// RemoveLabel mocks base method.
func (m *MockRepositoryClient) RemoveLabel(org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel.
func (mr *MockRepositoryClientMockRecorder) RemoveLabel(org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockRepositoryClient)(nil).RemoveLabel), org, repo, number, label)
}

// RemoveLabelWithContext mocks base method.
func (m *MockRepositoryClient) RemoveLabelWithContext(ctx context.Context, org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelWithContext", ctx, org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabelWithContext indicates an expected call of RemoveLabelWithContext.
func (mr *MockRepositoryClientMockRecorder) RemoveLabelWithContext(ctx, org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelWithContext", reflect.TypeOf((*MockRepositoryClient)(nil).RemoveLabelWithContext), ctx, org, repo, number, label)
}

// UpdateBranchProtection mocks base method.
func (m *MockRepositoryClient) UpdateBranchProtection(org, repo, branch string, config github.BranchProtectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", org, repo, branch, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection.
func (mr *MockRepositoryClientMockRecorder) UpdateBranchProtection(org, repo, branch, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockRepositoryClient)(nil).UpdateBranchProtection), org, repo, branch, config)
}

// UpdateRepo mocks base method.
func (m *MockRepositoryClient) UpdateRepo(owner, name string, repo github.RepoUpdateRequest) (*github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", owner, name, repo)
	ret0, _ := ret[0].(*github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockRepositoryClientMockRecorder) UpdateRepo(owner, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockRepositoryClient)(nil).UpdateRepo), owner, name, repo)
}

// UpdateRepoLabel mocks base method.
func (m *MockRepositoryClient) UpdateRepoLabel(org, repo, label, newName, description, color string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoLabel", org, repo, label, newName, description, color)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoLabel indicates an expected call of UpdateRepoLabel.
func (mr *MockRepositoryClientMockRecorder) UpdateRepoLabel(org, repo, label, newName, description, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoLabel", reflect.TypeOf((*MockRepositoryClient)(nil).UpdateRepoLabel), org, repo, label, newName, description, color)
}

// MockTeamClient is a mock of TeamClient interface.
type MockTeamClient struct {
	ctrl     *gomock.Controller
	recorder *MockTeamClientMockRecorder
}

// MockTeamClientMockRecorder is the mock recorder for MockTeamClient.
type MockTeamClientMockRecorder struct {
	mock *MockTeamClient
}

// NewMockTeamClient creates a new mock instance.
func NewMockTeamClient(ctrl *gomock.Controller) *MockTeamClient {
	mock := &MockTeamClient{ctrl: ctrl}
	mock.recorder = &MockTeamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamClient) EXPECT() *MockTeamClientMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockTeamClient) CreateTeam(org string, team github.Team) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", org, team)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamClientMockRecorder) CreateTeam(org, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamClient)(nil).CreateTeam), org, team)
}

// DeleteTeam mocks base method.
func (m *MockTeamClient) DeleteTeam(org string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", org, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamClientMockRecorder) DeleteTeam(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamClient)(nil).DeleteTeam), org, id)
}

// EditTeam mocks base method.
func (m *MockTeamClient) EditTeam(org string, t github.Team) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeam", org, t)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTeam indicates an expected call of EditTeam.
func (mr *MockTeamClientMockRecorder) EditTeam(org, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeam", reflect.TypeOf((*MockTeamClient)(nil).EditTeam), org, t)
}

// GetTeamBySlug mocks base method.
func (m *MockTeamClient) GetTeamBySlug(slug, org string) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBySlug", slug, org)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamBySlug indicates an expected call of GetTeamBySlug.
func (mr *MockTeamClientMockRecorder) GetTeamBySlug(slug, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBySlug", reflect.TypeOf((*MockTeamClient)(nil).GetTeamBySlug), slug, org)
}

// ListTeamInvitations mocks base method.
func (m *MockTeamClient) ListTeamInvitations(org string, id int) ([]github.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamInvitations", org, id)
	ret0, _ := ret[0].([]github.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamInvitations indicates an expected call of ListTeamInvitations.
func (mr *MockTeamClientMockRecorder) ListTeamInvitations(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamInvitations", reflect.TypeOf((*MockTeamClient)(nil).ListTeamInvitations), org, id)
}

// ListTeamMembers mocks base method.
func (m *MockTeamClient) ListTeamMembers(org string, id int, role string) ([]github.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", org, id, role)
	ret0, _ := ret[0].([]github.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMembers indicates an expected call of ListTeamMembers.
func (mr *MockTeamClientMockRecorder) ListTeamMembers(org, id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockTeamClient)(nil).ListTeamMembers), org, id, role)
}

// ListTeamRepos mocks base method.
func (m *MockTeamClient) ListTeamRepos(org string, id int) ([]github.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamRepos", org, id)
	ret0, _ := ret[0].([]github.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamRepos indicates an expected call of ListTeamRepos.
func (mr *MockTeamClientMockRecorder) ListTeamRepos(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamRepos", reflect.TypeOf((*MockTeamClient)(nil).ListTeamRepos), org, id)
}

// ListTeams mocks base method.
func (m *MockTeamClient) ListTeams(org string) ([]github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", org)
	ret0, _ := ret[0].([]github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockTeamClientMockRecorder) ListTeams(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockTeamClient)(nil).ListTeams), org)
}

// RemoveTeamMembership mocks base method.
func (m *MockTeamClient) RemoveTeamMembership(org string, id int, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembership", org, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeamMembership indicates an expected call of RemoveTeamMembership.
func (mr *MockTeamClientMockRecorder) RemoveTeamMembership(org, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembership", reflect.TypeOf((*MockTeamClient)(nil).RemoveTeamMembership), org, id, user)
}

// RemoveTeamRepo mocks base method.
func (m *MockTeamClient) RemoveTeamRepo(id int, org, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepo", id, org, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeamRepo indicates an expected call of RemoveTeamRepo.
func (mr *MockTeamClientMockRecorder) RemoveTeamRepo(id, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepo", reflect.TypeOf((*MockTeamClient)(nil).RemoveTeamRepo), id, org, repo)
}

// TeamHasMember mocks base method.
func (m *MockTeamClient) TeamHasMember(org string, teamID int, memberLogin string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamHasMember", org, teamID, memberLogin)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamHasMember indicates an expected call of TeamHasMember.
func (mr *MockTeamClientMockRecorder) TeamHasMember(org, teamID, memberLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamHasMember", reflect.TypeOf((*MockTeamClient)(nil).TeamHasMember), org, teamID, memberLogin)
}

// UpdateTeamMembership mocks base method.
func (m *MockTeamClient) UpdateTeamMembership(org string, id int, user string, maintainer bool) (*github.TeamMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamMembership", org, id, user, maintainer)
	ret0, _ := ret[0].(*github.TeamMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeamMembership indicates an expected call of UpdateTeamMembership.
func (mr *MockTeamClientMockRecorder) UpdateTeamMembership(org, id, user, maintainer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamMembership", reflect.TypeOf((*MockTeamClient)(nil).UpdateTeamMembership), org, id, user, maintainer)
}

// UpdateTeamRepo mocks base method.
func (m *MockTeamClient) UpdateTeamRepo(id int, org, repo string, permission github.TeamPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamRepo", id, org, repo, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamRepo indicates an expected call of UpdateTeamRepo.
func (mr *MockTeamClientMockRecorder) UpdateTeamRepo(id, org, repo, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamRepo", reflect.TypeOf((*MockTeamClient)(nil).UpdateTeamRepo), id, org, repo, permission)
}

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// BotUser mocks base method.
func (m *MockUserClient) BotUser() (*github.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotUser")
	ret0, _ := ret[0].(*github.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotUser indicates an expected call of BotUser.
func (mr *MockUserClientMockRecorder) BotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotUser", reflect.TypeOf((*MockUserClient)(nil).BotUser))
}

// BotUserChecker mocks base method.
func (m *MockUserClient) BotUserChecker() (func(string) bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotUserChecker")
	ret0, _ := ret[0].(func(string) bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotUserChecker indicates an expected call of BotUserChecker.
func (mr *MockUserClientMockRecorder) BotUserChecker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotUserChecker", reflect.TypeOf((*MockUserClient)(nil).BotUserChecker))
}

// Email mocks base method.
func (m *MockUserClient) Email() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Email")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Email indicates an expected call of Email.
func (mr *MockUserClientMockRecorder) Email() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Email", reflect.TypeOf((*MockUserClient)(nil).Email))
}

// MockProjectClient is a mock of ProjectClient interface.
type MockProjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectClientMockRecorder
}

// MockProjectClientMockRecorder is the mock recorder for MockProjectClient.
type MockProjectClientMockRecorder struct {
	mock *MockProjectClient
}

// NewMockProjectClient creates a new mock instance.
func NewMockProjectClient(ctrl *gomock.Controller) *MockProjectClient {
	mock := &MockProjectClient{ctrl: ctrl}
	mock.recorder = &MockProjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectClient) EXPECT() *MockProjectClientMockRecorder {
	return m.recorder
}

// CreateProjectCard mocks base method.
func (m *MockProjectClient) CreateProjectCard(org string, columnID int, projectCard github.ProjectCard) (*github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCard", org, columnID, projectCard)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectCard indicates an expected call of CreateProjectCard.
func (mr *MockProjectClientMockRecorder) CreateProjectCard(org, columnID, projectCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCard", reflect.TypeOf((*MockProjectClient)(nil).CreateProjectCard), org, columnID, projectCard)
}

// DeleteProjectCard mocks base method.
func (m *MockProjectClient) DeleteProjectCard(org string, projectCardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectCard", org, projectCardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectCard indicates an expected call of DeleteProjectCard.
func (mr *MockProjectClientMockRecorder) DeleteProjectCard(org, projectCardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCard", reflect.TypeOf((*MockProjectClient)(nil).DeleteProjectCard), org, projectCardID)
}

// GetColumnProjectCard mocks base method.
func (m *MockProjectClient) GetColumnProjectCard(org string, columnID int, issueURL string) (*github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnProjectCard", org, columnID, issueURL)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnProjectCard indicates an expected call of GetColumnProjectCard.
func (mr *MockProjectClientMockRecorder) GetColumnProjectCard(org, columnID, issueURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnProjectCard", reflect.TypeOf((*MockProjectClient)(nil).GetColumnProjectCard), org, columnID, issueURL)
}

// GetColumnProjectCards mocks base method.
func (m *MockProjectClient) GetColumnProjectCards(org string, columnID int) ([]github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnProjectCards", org, columnID)
	ret0, _ := ret[0].([]github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnProjectCards indicates an expected call of GetColumnProjectCards.
func (mr *MockProjectClientMockRecorder) GetColumnProjectCards(org, columnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnProjectCards", reflect.TypeOf((*MockProjectClient)(nil).GetColumnProjectCards), org, columnID)
}

// GetOrgProjects mocks base method.
func (m *MockProjectClient) GetOrgProjects(org string) ([]github.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgProjects", org)
	ret0, _ := ret[0].([]github.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgProjects indicates an expected call of GetOrgProjects.
func (mr *MockProjectClientMockRecorder) GetOrgProjects(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgProjects", reflect.TypeOf((*MockProjectClient)(nil).GetOrgProjects), org)
}

// GetProjectColumns mocks base method.
func (m *MockProjectClient) GetProjectColumns(org string, projectID int) ([]github.ProjectColumn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectColumns", org, projectID)
	ret0, _ := ret[0].([]github.ProjectColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectColumns indicates an expected call of GetProjectColumns.
func (mr *MockProjectClientMockRecorder) GetProjectColumns(org, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectColumns", reflect.TypeOf((*MockProjectClient)(nil).GetProjectColumns), org, projectID)
}

// GetRepoProjects mocks base method.
func (m *MockProjectClient) GetRepoProjects(owner, repo string) ([]github.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProjects", owner, repo)
	ret0, _ := ret[0].([]github.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProjects indicates an expected call of GetRepoProjects.
func (mr *MockProjectClientMockRecorder) GetRepoProjects(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProjects", reflect.TypeOf((*MockProjectClient)(nil).GetRepoProjects), owner, repo)
}

// MoveProjectCard mocks base method.
func (m *MockProjectClient) MoveProjectCard(org string, projectCardID, newColumnID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectCard", org, projectCardID, newColumnID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveProjectCard indicates an expected call of MoveProjectCard.
func (mr *MockProjectClientMockRecorder) MoveProjectCard(org, projectCardID, newColumnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectCard", reflect.TypeOf((*MockProjectClient)(nil).MoveProjectCard), org, projectCardID, newColumnID)
}

// MockMilestoneClient is a mock of MilestoneClient interface.
type MockMilestoneClient struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneClientMockRecorder
}

// MockMilestoneClientMockRecorder is the mock recorder for MockMilestoneClient.
type MockMilestoneClientMockRecorder struct {
	mock *MockMilestoneClient
}

// NewMockMilestoneClient creates a new mock instance.
func NewMockMilestoneClient(ctrl *gomock.Controller) *MockMilestoneClient {
	mock := &MockMilestoneClient{ctrl: ctrl}
	mock.recorder = &MockMilestoneClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneClient) EXPECT() *MockMilestoneClientMockRecorder {
	return m.recorder
}

// ClearMilestone mocks base method.
func (m *MockMilestoneClient) ClearMilestone(org, repo string, num int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMilestone", org, repo, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMilestone indicates an expected call of ClearMilestone.
func (mr *MockMilestoneClientMockRecorder) ClearMilestone(org, repo, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMilestone", reflect.TypeOf((*MockMilestoneClient)(nil).ClearMilestone), org, repo, num)
}

// ListMilestones mocks base method.
func (m *MockMilestoneClient) ListMilestones(org, repo string) ([]github.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", org, repo)
	ret0, _ := ret[0].([]github.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestones indicates an expected call of ListMilestones.
func (mr *MockMilestoneClientMockRecorder) ListMilestones(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockMilestoneClient)(nil).ListMilestones), org, repo)
}

// SetMilestone mocks base method.
func (m *MockMilestoneClient) SetMilestone(org, repo string, issueNum, milestoneNum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMilestone", org, repo, issueNum, milestoneNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMilestone indicates an expected call of SetMilestone.
func (mr *MockMilestoneClientMockRecorder) SetMilestone(org, repo, issueNum, milestoneNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMilestone", reflect.TypeOf((*MockMilestoneClient)(nil).SetMilestone), org, repo, issueNum, milestoneNum)
}

// MockRerunClient is a mock of RerunClient interface.
type MockRerunClient struct {
	ctrl     *gomock.Controller
	recorder *MockRerunClientMockRecorder
}

// MockRerunClientMockRecorder is the mock recorder for MockRerunClient.
type MockRerunClientMockRecorder struct {
	mock *MockRerunClient
}

// NewMockRerunClient creates a new mock instance.
func NewMockRerunClient(ctrl *gomock.Controller) *MockRerunClient {
	mock := &MockRerunClient{ctrl: ctrl}
	mock.recorder = &MockRerunClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRerunClient) EXPECT() *MockRerunClientMockRecorder {
	return m.recorder
}

// GetIssueLabels mocks base method.
func (m *MockRerunClient) GetIssueLabels(org, repo string, number int) ([]github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueLabels", org, repo, number)
	ret0, _ := ret[0].([]github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueLabels indicates an expected call of GetIssueLabels.
func (mr *MockRerunClientMockRecorder) GetIssueLabels(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLabels", reflect.TypeOf((*MockRerunClient)(nil).GetIssueLabels), org, repo, number)
}

// GetTeamBySlug mocks base method.
func (m *MockRerunClient) GetTeamBySlug(slug, org string) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBySlug", slug, org)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamBySlug indicates an expected call of GetTeamBySlug.
func (mr *MockRerunClientMockRecorder) GetTeamBySlug(slug, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBySlug", reflect.TypeOf((*MockRerunClient)(nil).GetTeamBySlug), slug, org)
}

// IsCollaborator mocks base method.
func (m *MockRerunClient) IsCollaborator(org, repo, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", org, repo, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockRerunClientMockRecorder) IsCollaborator(org, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockRerunClient)(nil).IsCollaborator), org, repo, user)
}

// IsMember mocks base method.
func (m *MockRerunClient) IsMember(org, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMember indicates an expected call of IsMember.
func (mr *MockRerunClientMockRecorder) IsMember(org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockRerunClient)(nil).IsMember), org, user)
}

// TeamHasMember mocks base method.
func (m *MockRerunClient) TeamHasMember(org string, teamID int, memberLogin string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamHasMember", org, teamID, memberLogin)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamHasMember indicates an expected call of TeamHasMember.
func (mr *MockRerunClientMockRecorder) TeamHasMember(org, teamID, memberLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamHasMember", reflect.TypeOf((*MockRerunClient)(nil).TeamHasMember), org, teamID, memberLogin)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AcceptUserOrgInvitation mocks base method.
func (m *MockClient) AcceptUserOrgInvitation(org string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUserOrgInvitation", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptUserOrgInvitation indicates an expected call of AcceptUserOrgInvitation.
func (mr *MockClientMockRecorder) AcceptUserOrgInvitation(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUserOrgInvitation", reflect.TypeOf((*MockClient)(nil).AcceptUserOrgInvitation), org)
}

// AcceptUserRepoInvitation mocks base method.
func (m *MockClient) AcceptUserRepoInvitation(invitationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUserRepoInvitation", invitationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptUserRepoInvitation indicates an expected call of AcceptUserRepoInvitation.
func (mr *MockClientMockRecorder) AcceptUserRepoInvitation(invitationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUserRepoInvitation", reflect.TypeOf((*MockClient)(nil).AcceptUserRepoInvitation), invitationID)
}

// AddLabel mocks base method.
func (m *MockClient) AddLabel(org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockClientMockRecorder) AddLabel(org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockClient)(nil).AddLabel), org, repo, number, label)
}

// AddLabelWithContext mocks base method.
func (m *MockClient) AddLabelWithContext(ctx context.Context, org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelWithContext", ctx, org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelWithContext indicates an expected call of AddLabelWithContext.
func (mr *MockClientMockRecorder) AddLabelWithContext(ctx, org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelWithContext", reflect.TypeOf((*MockClient)(nil).AddLabelWithContext), ctx, org, repo, number, label)
}

// AddLabels mocks base method.
func (m *MockClient) AddLabels(org, repo string, number int, labels ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{org, repo, number}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabels", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabels indicates an expected call of AddLabels.
func (mr *MockClientMockRecorder) AddLabels(org, repo, number interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{org, repo, number}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*MockClient)(nil).AddLabels), varargs...)
}

// AddLabelsWithContext mocks base method.
func (m *MockClient) AddLabelsWithContext(ctx context.Context, org, repo string, number int, labels ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, org, repo, number}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLabelsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelsWithContext indicates an expected call of AddLabelsWithContext.
func (mr *MockClientMockRecorder) AddLabelsWithContext(ctx, org, repo, number interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, org, repo, number}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelsWithContext", reflect.TypeOf((*MockClient)(nil).AddLabelsWithContext), varargs...)
}

// AddRepoLabel mocks base method.
func (m *MockClient) AddRepoLabel(org, repo, label, description, color string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRepoLabel", org, repo, label, description, color)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRepoLabel indicates an expected call of AddRepoLabel.
func (mr *MockClientMockRecorder) AddRepoLabel(org, repo, label, description, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRepoLabel", reflect.TypeOf((*MockClient)(nil).AddRepoLabel), org, repo, label, description, color)
}

// AssignIssue mocks base method.
func (m *MockClient) AssignIssue(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignIssue", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignIssue indicates an expected call of AssignIssue.
func (mr *MockClientMockRecorder) AssignIssue(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignIssue", reflect.TypeOf((*MockClient)(nil).AssignIssue), org, repo, number, logins)
}

// BotUser mocks base method.
func (m *MockClient) BotUser() (*github.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotUser")
	ret0, _ := ret[0].(*github.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotUser indicates an expected call of BotUser.
func (mr *MockClientMockRecorder) BotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotUser", reflect.TypeOf((*MockClient)(nil).BotUser))
}

// BotUserChecker mocks base method.
func (m *MockClient) BotUserChecker() (func(string) bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotUserChecker")
	ret0, _ := ret[0].(func(string) bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotUserChecker indicates an expected call of BotUserChecker.
func (mr *MockClientMockRecorder) BotUserChecker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotUserChecker", reflect.TypeOf((*MockClient)(nil).BotUserChecker))
}

// ClearMilestone mocks base method.
func (m *MockClient) ClearMilestone(org, repo string, num int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMilestone", org, repo, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMilestone indicates an expected call of ClearMilestone.
func (mr *MockClientMockRecorder) ClearMilestone(org, repo, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMilestone", reflect.TypeOf((*MockClient)(nil).ClearMilestone), org, repo, num)
}

// CloseIssue mocks base method.
func (m *MockClient) CloseIssue(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIssue", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIssue indicates an expected call of CloseIssue.
func (mr *MockClientMockRecorder) CloseIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIssue", reflect.TypeOf((*MockClient)(nil).CloseIssue), org, repo, number)
}

// ClosePR mocks base method.
func (m *MockClient) ClosePR(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePR", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePR indicates an expected call of ClosePR.
func (mr *MockClientMockRecorder) ClosePR(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePR", reflect.TypeOf((*MockClient)(nil).ClosePR), org, repo, number)
}

// CreateComment mocks base method.
func (m *MockClient) CreateComment(org, repo string, number int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", org, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClientMockRecorder) CreateComment(org, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), org, repo, number, comment)
}

// CreateCommentReaction mocks base method.
func (m *MockClient) CreateCommentReaction(org, repo string, id int, reaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReaction", org, repo, id, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentReaction indicates an expected call of CreateCommentReaction.
func (mr *MockClientMockRecorder) CreateCommentReaction(org, repo, id, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReaction", reflect.TypeOf((*MockClient)(nil).CreateCommentReaction), org, repo, id, reaction)
}

// CreateCommentWithContext mocks base method.
func (m *MockClient) CreateCommentWithContext(ctx context.Context, org, repo string, number int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentWithContext", ctx, org, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentWithContext indicates an expected call of CreateCommentWithContext.
func (mr *MockClientMockRecorder) CreateCommentWithContext(ctx, org, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentWithContext", reflect.TypeOf((*MockClient)(nil).CreateCommentWithContext), ctx, org, repo, number, comment)
}

// CreateFork mocks base method.
func (m *MockClient) CreateFork(owner, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFork", owner, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFork indicates an expected call of CreateFork.
func (mr *MockClientMockRecorder) CreateFork(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFork", reflect.TypeOf((*MockClient)(nil).CreateFork), owner, repo)
}

// CreateIssue mocks base method.
func (m *MockClient) CreateIssue(org, repo, title, body string, milestone int, labels, assignees []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", org, repo, title, body, milestone, labels, assignees)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockClientMockRecorder) CreateIssue(org, repo, title, body, milestone, labels, assignees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockClient)(nil).CreateIssue), org, repo, title, body, milestone, labels, assignees)
}

// CreateIssueReaction mocks base method.
func (m *MockClient) CreateIssueReaction(org, repo string, id int, reaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssueReaction", org, repo, id, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssueReaction indicates an expected call of CreateIssueReaction.
func (mr *MockClientMockRecorder) CreateIssueReaction(org, repo, id, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueReaction", reflect.TypeOf((*MockClient)(nil).CreateIssueReaction), org, repo, id, reaction)
}

// CreateOrgHook mocks base method.
func (m *MockClient) CreateOrgHook(org string, req github.HookRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgHook", org, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrgHook indicates an expected call of CreateOrgHook.
func (mr *MockClientMockRecorder) CreateOrgHook(org, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgHook", reflect.TypeOf((*MockClient)(nil).CreateOrgHook), org, req)
}

// CreateProjectCard mocks base method.
func (m *MockClient) CreateProjectCard(org string, columnID int, projectCard github.ProjectCard) (*github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCard", org, columnID, projectCard)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectCard indicates an expected call of CreateProjectCard.
func (mr *MockClientMockRecorder) CreateProjectCard(org, columnID, projectCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCard", reflect.TypeOf((*MockClient)(nil).CreateProjectCard), org, columnID, projectCard)
}

// CreatePullRequest mocks base method.
func (m *MockClient) CreatePullRequest(org, repo, title, body, head, base string, canModify bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", org, repo, title, body, head, base, canModify)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockClientMockRecorder) CreatePullRequest(org, repo, title, body, head, base, canModify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockClient)(nil).CreatePullRequest), org, repo, title, body, head, base, canModify)
}

// CreatePullRequestReviewComment mocks base method.
func (m *MockClient) CreatePullRequestReviewComment(org, repo string, number int, rc github.ReviewComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestReviewComment", org, repo, number, rc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePullRequestReviewComment indicates an expected call of CreatePullRequestReviewComment.
func (mr *MockClientMockRecorder) CreatePullRequestReviewComment(org, repo, number, rc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestReviewComment", reflect.TypeOf((*MockClient)(nil).CreatePullRequestReviewComment), org, repo, number, rc)
}

// CreateRepo mocks base method.
func (m *MockClient) CreateRepo(owner string, isUser bool, repo github.RepoCreateRequest) (*github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", owner, isUser, repo)
	ret0, _ := ret[0].(*github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockClientMockRecorder) CreateRepo(owner, isUser, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockClient)(nil).CreateRepo), owner, isUser, repo)
}

// CreateRepoHook mocks base method.
func (m *MockClient) CreateRepoHook(org, repo string, req github.HookRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoHook", org, repo, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoHook indicates an expected call of CreateRepoHook.
func (mr *MockClientMockRecorder) CreateRepoHook(org, repo, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoHook", reflect.TypeOf((*MockClient)(nil).CreateRepoHook), org, repo, req)
}

// CreateReview mocks base method.
func (m *MockClient) CreateReview(org, repo string, number int, r github.DraftReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", org, repo, number, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockClientMockRecorder) CreateReview(org, repo, number, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockClient)(nil).CreateReview), org, repo, number, r)
}

// CreateStatus mocks base method.
func (m *MockClient) CreateStatus(org, repo, SHA string, s github.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", org, repo, SHA, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockClientMockRecorder) CreateStatus(org, repo, SHA, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockClient)(nil).CreateStatus), org, repo, SHA, s)
}

// CreateTeam mocks base method.
func (m *MockClient) CreateTeam(org string, team github.Team) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", org, team)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockClientMockRecorder) CreateTeam(org, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockClient)(nil).CreateTeam), org, team)
}

// DeleteComment mocks base method.
func (m *MockClient) DeleteComment(org, repo string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", org, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockClientMockRecorder) DeleteComment(org, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockClient)(nil).DeleteComment), org, repo, id)
}

// DeleteCommentWithContext mocks base method.
func (m *MockClient) DeleteCommentWithContext(ctx context.Context, org, repo string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentWithContext", ctx, org, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentWithContext indicates an expected call of DeleteCommentWithContext.
func (mr *MockClientMockRecorder) DeleteCommentWithContext(ctx, org, repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentWithContext", reflect.TypeOf((*MockClient)(nil).DeleteCommentWithContext), ctx, org, repo, id)
}

// DeleteOrgHook mocks base method.
func (m *MockClient) DeleteOrgHook(org string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrgHook", org, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgHook indicates an expected call of DeleteOrgHook.
func (mr *MockClientMockRecorder) DeleteOrgHook(org, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgHook", reflect.TypeOf((*MockClient)(nil).DeleteOrgHook), org, id, req)
}

// DeleteProjectCard mocks base method.
func (m *MockClient) DeleteProjectCard(org string, projectCardID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectCard", org, projectCardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectCard indicates an expected call of DeleteProjectCard.
func (mr *MockClientMockRecorder) DeleteProjectCard(org, projectCardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCard", reflect.TypeOf((*MockClient)(nil).DeleteProjectCard), org, projectCardID)
}

// DeleteRef mocks base method.
func (m *MockClient) DeleteRef(org, repo, ref string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRef", org, repo, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRef indicates an expected call of DeleteRef.
func (mr *MockClientMockRecorder) DeleteRef(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRef", reflect.TypeOf((*MockClient)(nil).DeleteRef), org, repo, ref)
}

// DeleteRepoHook mocks base method.
func (m *MockClient) DeleteRepoHook(org, repo string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoHook", org, repo, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoHook indicates an expected call of DeleteRepoHook.
func (mr *MockClientMockRecorder) DeleteRepoHook(org, repo, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoHook", reflect.TypeOf((*MockClient)(nil).DeleteRepoHook), org, repo, id, req)
}

// DeleteRepoLabel mocks base method.
func (m *MockClient) DeleteRepoLabel(org, repo, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoLabel", org, repo, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoLabel indicates an expected call of DeleteRepoLabel.
func (mr *MockClientMockRecorder) DeleteRepoLabel(org, repo, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoLabel", reflect.TypeOf((*MockClient)(nil).DeleteRepoLabel), org, repo, label)
}

// DeleteStaleComments mocks base method.
func (m *MockClient) DeleteStaleComments(org, repo string, number int, comments []github.IssueComment, isStale func(github.IssueComment) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaleComments", org, repo, number, comments, isStale)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaleComments indicates an expected call of DeleteStaleComments.
func (mr *MockClientMockRecorder) DeleteStaleComments(org, repo, number, comments, isStale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaleComments", reflect.TypeOf((*MockClient)(nil).DeleteStaleComments), org, repo, number, comments, isStale)
}

// DeleteStaleCommentsWithContext mocks base method.
func (m *MockClient) DeleteStaleCommentsWithContext(ctx context.Context, org, repo string, number int, comments []github.IssueComment, isStale func(github.IssueComment) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaleCommentsWithContext", ctx, org, repo, number, comments, isStale)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaleCommentsWithContext indicates an expected call of DeleteStaleCommentsWithContext.
func (mr *MockClientMockRecorder) DeleteStaleCommentsWithContext(ctx, org, repo, number, comments, isStale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaleCommentsWithContext", reflect.TypeOf((*MockClient)(nil).DeleteStaleCommentsWithContext), ctx, org, repo, number, comments, isStale)
}

// DeleteTeam mocks base method.
func (m *MockClient) DeleteTeam(org string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", org, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockClientMockRecorder) DeleteTeam(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockClient)(nil).DeleteTeam), org, id)
}

// EditComment mocks base method.
func (m *MockClient) EditComment(org, repo string, id int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", org, repo, id, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditComment indicates an expected call of EditComment.
func (mr *MockClientMockRecorder) EditComment(org, repo, id, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockClient)(nil).EditComment), org, repo, id, comment)
}

// EditIssue mocks base method.
func (m *MockClient) EditIssue(org, repo string, number int, issue *github.Issue) (*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditIssue", org, repo, number, issue)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditIssue indicates an expected call of EditIssue.
func (mr *MockClientMockRecorder) EditIssue(org, repo, number, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditIssue", reflect.TypeOf((*MockClient)(nil).EditIssue), org, repo, number, issue)
}

// EditOrg mocks base method.
func (m *MockClient) EditOrg(name string, config github.Organization) (*github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrg", name, config)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditOrg indicates an expected call of EditOrg.
func (mr *MockClientMockRecorder) EditOrg(name, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrg", reflect.TypeOf((*MockClient)(nil).EditOrg), name, config)
}

// EditOrgHook mocks base method.
func (m *MockClient) EditOrgHook(org string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrgHook", org, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrgHook indicates an expected call of EditOrgHook.
func (mr *MockClientMockRecorder) EditOrgHook(org, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrgHook", reflect.TypeOf((*MockClient)(nil).EditOrgHook), org, id, req)
}

// EditPullRequest mocks base method.
func (m *MockClient) EditPullRequest(org, repo string, number int, pr *github.PullRequest) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPullRequest", org, repo, number, pr)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPullRequest indicates an expected call of EditPullRequest.
func (mr *MockClientMockRecorder) EditPullRequest(org, repo, number, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPullRequest", reflect.TypeOf((*MockClient)(nil).EditPullRequest), org, repo, number, pr)
}

// EditRepoHook mocks base method.
func (m *MockClient) EditRepoHook(org, repo string, id int, req github.HookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRepoHook", org, repo, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRepoHook indicates an expected call of EditRepoHook.
func (mr *MockClientMockRecorder) EditRepoHook(org, repo, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRepoHook", reflect.TypeOf((*MockClient)(nil).EditRepoHook), org, repo, id, req)
}

// EditTeam mocks base method.
func (m *MockClient) EditTeam(org string, t github.Team) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTeam", org, t)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTeam indicates an expected call of EditTeam.
func (mr *MockClientMockRecorder) EditTeam(org, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTeam", reflect.TypeOf((*MockClient)(nil).EditTeam), org, t)
}

// Email mocks base method.
func (m *MockClient) Email() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Email")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Email indicates an expected call of Email.
func (mr *MockClientMockRecorder) Email() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Email", reflect.TypeOf((*MockClient)(nil).Email))
}

// EnsureFork mocks base method.
func (m *MockClient) EnsureFork(forkingUser, org, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFork", forkingUser, org, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureFork indicates an expected call of EnsureFork.
func (mr *MockClientMockRecorder) EnsureFork(forkingUser, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFork", reflect.TypeOf((*MockClient)(nil).EnsureFork), forkingUser, org, repo)
}

// FindIssues mocks base method.
func (m *MockClient) FindIssues(query, sort string, asc bool) ([]github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIssues", query, sort, asc)
	ret0, _ := ret[0].([]github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIssues indicates an expected call of FindIssues.
func (mr *MockClientMockRecorder) FindIssues(query, sort, asc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIssues", reflect.TypeOf((*MockClient)(nil).FindIssues), query, sort, asc)
}

// ForPlugin mocks base method.
func (m *MockClient) ForPlugin(plugin string) github.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForPlugin", plugin)
	ret0, _ := ret[0].(github.Client)
	return ret0
}

// ForPlugin indicates an expected call of ForPlugin.
func (mr *MockClientMockRecorder) ForPlugin(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForPlugin", reflect.TypeOf((*MockClient)(nil).ForPlugin), plugin)
}

// ForSubcomponent mocks base method.
func (m *MockClient) ForSubcomponent(subcomponent string) github.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForSubcomponent", subcomponent)
	ret0, _ := ret[0].(github.Client)
	return ret0
}

// ForSubcomponent indicates an expected call of ForSubcomponent.
func (mr *MockClientMockRecorder) ForSubcomponent(subcomponent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForSubcomponent", reflect.TypeOf((*MockClient)(nil).ForSubcomponent), subcomponent)
}

// GetApp mocks base method.
func (m *MockClient) GetApp() (*github.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp")
	ret0, _ := ret[0].(*github.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockClientMockRecorder) GetApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockClient)(nil).GetApp))
}

// GetBranchProtection mocks base method.
func (m *MockClient) GetBranchProtection(org, repo, branch string) (*github.BranchProtection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchProtection", org, repo, branch)
	ret0, _ := ret[0].(*github.BranchProtection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchProtection indicates an expected call of GetBranchProtection.
func (mr *MockClientMockRecorder) GetBranchProtection(org, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchProtection", reflect.TypeOf((*MockClient)(nil).GetBranchProtection), org, repo, branch)
}

// GetBranches mocks base method.
func (m *MockClient) GetBranches(org, repo string, onlyProtected bool) ([]github.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", org, repo, onlyProtected)
	ret0, _ := ret[0].([]github.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockClientMockRecorder) GetBranches(org, repo, onlyProtected interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockClient)(nil).GetBranches), org, repo, onlyProtected)
}

// GetColumnProjectCard mocks base method.
func (m *MockClient) GetColumnProjectCard(org string, columnID int, issueURL string) (*github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnProjectCard", org, columnID, issueURL)
	ret0, _ := ret[0].(*github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnProjectCard indicates an expected call of GetColumnProjectCard.
func (mr *MockClientMockRecorder) GetColumnProjectCard(org, columnID, issueURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnProjectCard", reflect.TypeOf((*MockClient)(nil).GetColumnProjectCard), org, columnID, issueURL)
}

// GetColumnProjectCards mocks base method.
func (m *MockClient) GetColumnProjectCards(org string, columnID int) ([]github.ProjectCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnProjectCards", org, columnID)
	ret0, _ := ret[0].([]github.ProjectCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnProjectCards indicates an expected call of GetColumnProjectCards.
func (mr *MockClientMockRecorder) GetColumnProjectCards(org, columnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnProjectCards", reflect.TypeOf((*MockClient)(nil).GetColumnProjectCards), org, columnID)
}

// GetCombinedStatus mocks base method.
func (m *MockClient) GetCombinedStatus(org, repo, ref string) (*github.CombinedStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedStatus", org, repo, ref)
	ret0, _ := ret[0].(*github.CombinedStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedStatus indicates an expected call of GetCombinedStatus.
func (mr *MockClientMockRecorder) GetCombinedStatus(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedStatus", reflect.TypeOf((*MockClient)(nil).GetCombinedStatus), org, repo, ref)
}

// GetDirectory mocks base method.
func (m *MockClient) GetDirectory(org, repo, dirpath, commit string) ([]github.DirectoryContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectory", org, repo, dirpath, commit)
	ret0, _ := ret[0].([]github.DirectoryContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockClientMockRecorder) GetDirectory(org, repo, dirpath, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockClient)(nil).GetDirectory), org, repo, dirpath, commit)
}

// GetFile mocks base method.
func (m *MockClient) GetFile(org, repo, filepath, commit string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", org, repo, filepath, commit)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockClientMockRecorder) GetFile(org, repo, filepath, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockClient)(nil).GetFile), org, repo, filepath, commit)
}

// GetIssue mocks base method.
func (m *MockClient) GetIssue(org, repo string, number int) (*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", org, repo, number)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockClientMockRecorder) GetIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockClient)(nil).GetIssue), org, repo, number)
}

// GetIssueLabels mocks base method.
func (m *MockClient) GetIssueLabels(org, repo string, number int) ([]github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueLabels", org, repo, number)
	ret0, _ := ret[0].([]github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueLabels indicates an expected call of GetIssueLabels.
func (mr *MockClientMockRecorder) GetIssueLabels(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLabels", reflect.TypeOf((*MockClient)(nil).GetIssueLabels), org, repo, number)
}

// GetOrg mocks base method.
func (m *MockClient) GetOrg(name string) (*github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", name)
	ret0, _ := ret[0].(*github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockClientMockRecorder) GetOrg(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockClient)(nil).GetOrg), name)
}

// GetOrgProjects mocks base method.
func (m *MockClient) GetOrgProjects(org string) ([]github.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgProjects", org)
	ret0, _ := ret[0].([]github.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgProjects indicates an expected call of GetOrgProjects.
func (mr *MockClientMockRecorder) GetOrgProjects(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgProjects", reflect.TypeOf((*MockClient)(nil).GetOrgProjects), org)
}

// GetProjectColumns mocks base method.
func (m *MockClient) GetProjectColumns(org string, projectID int) ([]github.ProjectColumn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectColumns", org, projectID)
	ret0, _ := ret[0].([]github.ProjectColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectColumns indicates an expected call of GetProjectColumns.
func (mr *MockClientMockRecorder) GetProjectColumns(org, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectColumns", reflect.TypeOf((*MockClient)(nil).GetProjectColumns), org, projectID)
}

// GetPullRequest mocks base method.
func (m *MockClient) GetPullRequest(org, repo string, number int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", org, repo, number)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockClientMockRecorder) GetPullRequest(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockClient)(nil).GetPullRequest), org, repo, number)
}

// GetPullRequestChanges mocks base method.
func (m *MockClient) GetPullRequestChanges(org, repo string, number int) ([]github.PullRequestChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestChanges", org, repo, number)
	ret0, _ := ret[0].([]github.PullRequestChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestChanges indicates an expected call of GetPullRequestChanges.
func (mr *MockClientMockRecorder) GetPullRequestChanges(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestChanges", reflect.TypeOf((*MockClient)(nil).GetPullRequestChanges), org, repo, number)
}

// GetPullRequestPatch mocks base method.
func (m *MockClient) GetPullRequestPatch(org, repo string, number int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestPatch", org, repo, number)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestPatch indicates an expected call of GetPullRequestPatch.
func (mr *MockClientMockRecorder) GetPullRequestPatch(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestPatch", reflect.TypeOf((*MockClient)(nil).GetPullRequestPatch), org, repo, number)
}

// GetPullRequests mocks base method.
func (m *MockClient) GetPullRequests(org, repo string) ([]github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", org, repo)
	ret0, _ := ret[0].([]github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockClientMockRecorder) GetPullRequests(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockClient)(nil).GetPullRequests), org, repo)
}

// GetRef mocks base method.
func (m *MockClient) GetRef(org, repo, ref string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", org, repo, ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRef indicates an expected call of GetRef.
func (mr *MockClientMockRecorder) GetRef(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockClient)(nil).GetRef), org, repo, ref)
}

// GetRepo mocks base method.
func (m *MockClient) GetRepo(owner, name string) (github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", owner, name)
	ret0, _ := ret[0].(github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockClientMockRecorder) GetRepo(owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockClient)(nil).GetRepo), owner, name)
}

// GetRepoLabels mocks base method.
func (m *MockClient) GetRepoLabels(org, repo string) ([]github.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoLabels", org, repo)
	ret0, _ := ret[0].([]github.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoLabels indicates an expected call of GetRepoLabels.
func (mr *MockClientMockRecorder) GetRepoLabels(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoLabels", reflect.TypeOf((*MockClient)(nil).GetRepoLabels), org, repo)
}

// GetRepoProjects mocks base method.
func (m *MockClient) GetRepoProjects(owner, repo string) ([]github.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProjects", owner, repo)
	ret0, _ := ret[0].([]github.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProjects indicates an expected call of GetRepoProjects.
func (mr *MockClientMockRecorder) GetRepoProjects(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProjects", reflect.TypeOf((*MockClient)(nil).GetRepoProjects), owner, repo)
}

// GetRepos mocks base method.
func (m *MockClient) GetRepos(org string, isUser bool) ([]github.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepos", org, isUser)
	ret0, _ := ret[0].([]github.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepos indicates an expected call of GetRepos.
func (mr *MockClientMockRecorder) GetRepos(org, isUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepos", reflect.TypeOf((*MockClient)(nil).GetRepos), org, isUser)
}

// GetSingleCommit mocks base method.
func (m *MockClient) GetSingleCommit(org, repo, SHA string) (github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleCommit", org, repo, SHA)
	ret0, _ := ret[0].(github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleCommit indicates an expected call of GetSingleCommit.
func (mr *MockClientMockRecorder) GetSingleCommit(org, repo, SHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleCommit", reflect.TypeOf((*MockClient)(nil).GetSingleCommit), org, repo, SHA)
}

// GetTeamBySlug mocks base method.
func (m *MockClient) GetTeamBySlug(slug, org string) (*github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBySlug", slug, org)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamBySlug indicates an expected call of GetTeamBySlug.
func (mr *MockClientMockRecorder) GetTeamBySlug(slug, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBySlug", reflect.TypeOf((*MockClient)(nil).GetTeamBySlug), slug, org)
}

// GetUserPermission mocks base method.
func (m *MockClient) GetUserPermission(org, repo, user string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermission", org, repo, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermission indicates an expected call of GetUserPermission.
func (mr *MockClientMockRecorder) GetUserPermission(org, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermission", reflect.TypeOf((*MockClient)(nil).GetUserPermission), org, repo, user)
}

// HasPermission mocks base method.
func (m *MockClient) HasPermission(org, repo, user string, roles ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{org, repo, user}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPermission", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockClientMockRecorder) HasPermission(org, repo, user interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{org, repo, user}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockClient)(nil).HasPermission), varargs...)
}

// IsCollaborator mocks base method.
func (m *MockClient) IsCollaborator(org, repo, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", org, repo, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockClientMockRecorder) IsCollaborator(org, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockClient)(nil).IsCollaborator), org, repo, user)
}

// IsMember mocks base method.
func (m *MockClient) IsMember(org, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMember", org, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMember indicates an expected call of IsMember.
func (mr *MockClientMockRecorder) IsMember(org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMember", reflect.TypeOf((*MockClient)(nil).IsMember), org, user)
}

// IsMergeable mocks base method.
func (m *MockClient) IsMergeable(org, repo string, number int, SHA string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMergeable", org, repo, number, SHA)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMergeable indicates an expected call of IsMergeable.
func (mr *MockClientMockRecorder) IsMergeable(org, repo, number, SHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMergeable", reflect.TypeOf((*MockClient)(nil).IsMergeable), org, repo, number, SHA)
}

// ListAppInstallations mocks base method.
func (m *MockClient) ListAppInstallations() ([]github.AppInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstallations")
	ret0, _ := ret[0].([]github.AppInstallation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstallations indicates an expected call of ListAppInstallations.
func (mr *MockClientMockRecorder) ListAppInstallations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstallations", reflect.TypeOf((*MockClient)(nil).ListAppInstallations))
}

// ListCheckRuns mocks base method.
func (m *MockClient) ListCheckRuns(org, repo, ref string) (*github.CheckRunList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckRuns", org, repo, ref)
	ret0, _ := ret[0].(*github.CheckRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckRuns indicates an expected call of ListCheckRuns.
func (mr *MockClientMockRecorder) ListCheckRuns(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckRuns", reflect.TypeOf((*MockClient)(nil).ListCheckRuns), org, repo, ref)
}

// ListCollaborators mocks base method.
func (m *MockClient) ListCollaborators(org, repo string) ([]github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborators", org, repo)
	ret0, _ := ret[0].([]github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollaborators indicates an expected call of ListCollaborators.
func (mr *MockClientMockRecorder) ListCollaborators(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborators", reflect.TypeOf((*MockClient)(nil).ListCollaborators), org, repo)
}

// ListCurrentUserOrgInvitations mocks base method.
func (m *MockClient) ListCurrentUserOrgInvitations() ([]github.UserOrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrentUserOrgInvitations")
	ret0, _ := ret[0].([]github.UserOrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrentUserOrgInvitations indicates an expected call of ListCurrentUserOrgInvitations.
func (mr *MockClientMockRecorder) ListCurrentUserOrgInvitations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserOrgInvitations", reflect.TypeOf((*MockClient)(nil).ListCurrentUserOrgInvitations))
}

// ListCurrentUserRepoInvitations mocks base method.
func (m *MockClient) ListCurrentUserRepoInvitations() ([]github.UserRepoInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrentUserRepoInvitations")
	ret0, _ := ret[0].([]github.UserRepoInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrentUserRepoInvitations indicates an expected call of ListCurrentUserRepoInvitations.
func (mr *MockClientMockRecorder) ListCurrentUserRepoInvitations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserRepoInvitations", reflect.TypeOf((*MockClient)(nil).ListCurrentUserRepoInvitations))
}

// ListFileCommits mocks base method.
func (m *MockClient) ListFileCommits(org, repo, path string) ([]github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFileCommits", org, repo, path)
	ret0, _ := ret[0].([]github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileCommits indicates an expected call of ListFileCommits.
func (mr *MockClientMockRecorder) ListFileCommits(org, repo, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileCommits", reflect.TypeOf((*MockClient)(nil).ListFileCommits), org, repo, path)
}

// ListIssueComments mocks base method.
func (m *MockClient) ListIssueComments(org, repo string, number int) ([]github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueComments", org, repo, number)
	ret0, _ := ret[0].([]github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueComments indicates an expected call of ListIssueComments.
func (mr *MockClientMockRecorder) ListIssueComments(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueComments", reflect.TypeOf((*MockClient)(nil).ListIssueComments), org, repo, number)
}

// ListIssueCommentsWithContext mocks base method.
func (m *MockClient) ListIssueCommentsWithContext(ctx context.Context, org, repo string, number int) ([]github.IssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueCommentsWithContext", ctx, org, repo, number)
	ret0, _ := ret[0].([]github.IssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueCommentsWithContext indicates an expected call of ListIssueCommentsWithContext.
func (mr *MockClientMockRecorder) ListIssueCommentsWithContext(ctx, org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueCommentsWithContext", reflect.TypeOf((*MockClient)(nil).ListIssueCommentsWithContext), ctx, org, repo, number)
}

// ListIssueEvents mocks base method.
func (m *MockClient) ListIssueEvents(org, repo string, num int) ([]github.ListedIssueEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueEvents", org, repo, num)
	ret0, _ := ret[0].([]github.ListedIssueEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueEvents indicates an expected call of ListIssueEvents.
func (mr *MockClientMockRecorder) ListIssueEvents(org, repo, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueEvents", reflect.TypeOf((*MockClient)(nil).ListIssueEvents), org, repo, num)
}

// ListMilestones mocks base method.
func (m *MockClient) ListMilestones(org, repo string) ([]github.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", org, repo)
	ret0, _ := ret[0].([]github.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestones indicates an expected call of ListMilestones.
func (mr *MockClientMockRecorder) ListMilestones(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockClient)(nil).ListMilestones), org, repo)
}

// ListOpenIssues mocks base method.
func (m *MockClient) ListOpenIssues(org, repo string) ([]github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenIssues", org, repo)
	ret0, _ := ret[0].([]github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenIssues indicates an expected call of ListOpenIssues.
func (mr *MockClientMockRecorder) ListOpenIssues(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenIssues", reflect.TypeOf((*MockClient)(nil).ListOpenIssues), org, repo)
}

// ListOrgHooks mocks base method.
func (m *MockClient) ListOrgHooks(org string) ([]github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgHooks", org)
	ret0, _ := ret[0].([]github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgHooks indicates an expected call of ListOrgHooks.
func (mr *MockClientMockRecorder) ListOrgHooks(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgHooks", reflect.TypeOf((*MockClient)(nil).ListOrgHooks), org)
}

// ListOrgInvitations mocks base method.
func (m *MockClient) ListOrgInvitations(org string) ([]github.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgInvitations", org)
	ret0, _ := ret[0].([]github.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgInvitations indicates an expected call of ListOrgInvitations.
func (mr *MockClientMockRecorder) ListOrgInvitations(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgInvitations", reflect.TypeOf((*MockClient)(nil).ListOrgInvitations), org)
}

// ListOrgMembers mocks base method.
func (m *MockClient) ListOrgMembers(org, role string) ([]github.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgMembers", org, role)
	ret0, _ := ret[0].([]github.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrgMembers indicates an expected call of ListOrgMembers.
func (mr *MockClientMockRecorder) ListOrgMembers(org, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgMembers", reflect.TypeOf((*MockClient)(nil).ListOrgMembers), org, role)
}

// ListPRCommits mocks base method.
func (m *MockClient) ListPRCommits(org, repo string, number int) ([]github.RepositoryCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPRCommits", org, repo, number)
	ret0, _ := ret[0].([]github.RepositoryCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPRCommits indicates an expected call of ListPRCommits.
func (mr *MockClientMockRecorder) ListPRCommits(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPRCommits", reflect.TypeOf((*MockClient)(nil).ListPRCommits), org, repo, number)
}

// ListPullRequestComments mocks base method.
func (m *MockClient) ListPullRequestComments(org, repo string, number int) ([]github.ReviewComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComments", org, repo, number)
	ret0, _ := ret[0].([]github.ReviewComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComments indicates an expected call of ListPullRequestComments.
func (mr *MockClientMockRecorder) ListPullRequestComments(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComments", reflect.TypeOf((*MockClient)(nil).ListPullRequestComments), org, repo, number)
}

// ListRepoHooks mocks base method.
func (m *MockClient) ListRepoHooks(org, repo string) ([]github.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoHooks", org, repo)
	ret0, _ := ret[0].([]github.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoHooks indicates an expected call of ListRepoHooks.
func (mr *MockClientMockRecorder) ListRepoHooks(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoHooks", reflect.TypeOf((*MockClient)(nil).ListRepoHooks), org, repo)
}

// ListRepoTeams mocks base method.
func (m *MockClient) ListRepoTeams(org, repo string) ([]github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoTeams", org, repo)
	ret0, _ := ret[0].([]github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoTeams indicates an expected call of ListRepoTeams.
func (mr *MockClientMockRecorder) ListRepoTeams(org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoTeams", reflect.TypeOf((*MockClient)(nil).ListRepoTeams), org, repo)
}

// ListReviews mocks base method.
func (m *MockClient) ListReviews(org, repo string, number int) ([]github.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", org, repo, number)
	ret0, _ := ret[0].([]github.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockClientMockRecorder) ListReviews(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockClient)(nil).ListReviews), org, repo, number)
}

// ListStatuses mocks base method.
func (m *MockClient) ListStatuses(org, repo, ref string) ([]github.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatuses", org, repo, ref)
	ret0, _ := ret[0].([]github.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatuses indicates an expected call of ListStatuses.
func (mr *MockClientMockRecorder) ListStatuses(org, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatuses", reflect.TypeOf((*MockClient)(nil).ListStatuses), org, repo, ref)
}

// ListTeamInvitations mocks base method.
func (m *MockClient) ListTeamInvitations(org string, id int) ([]github.OrgInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamInvitations", org, id)
	ret0, _ := ret[0].([]github.OrgInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamInvitations indicates an expected call of ListTeamInvitations.
func (mr *MockClientMockRecorder) ListTeamInvitations(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamInvitations", reflect.TypeOf((*MockClient)(nil).ListTeamInvitations), org, id)
}

// ListTeamMembers mocks base method.
func (m *MockClient) ListTeamMembers(org string, id int, role string) ([]github.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", org, id, role)
	ret0, _ := ret[0].([]github.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamMembers indicates an expected call of ListTeamMembers.
func (mr *MockClientMockRecorder) ListTeamMembers(org, id, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockClient)(nil).ListTeamMembers), org, id, role)
}

// ListTeamRepos mocks base method.
func (m *MockClient) ListTeamRepos(org string, id int) ([]github.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamRepos", org, id)
	ret0, _ := ret[0].([]github.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamRepos indicates an expected call of ListTeamRepos.
func (mr *MockClientMockRecorder) ListTeamRepos(org, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamRepos", reflect.TypeOf((*MockClient)(nil).ListTeamRepos), org, id)
}

// ListTeams mocks base method.
func (m *MockClient) ListTeams(org string) ([]github.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", org)
	ret0, _ := ret[0].([]github.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockClientMockRecorder) ListTeams(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockClient)(nil).ListTeams), org)
}

// Merge mocks base method.
func (m *MockClient) Merge(org, repo string, pr int, details github.MergeDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", org, repo, pr, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockClientMockRecorder) Merge(org, repo, pr, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockClient)(nil).Merge), org, repo, pr, details)
}

// MoveProjectCard mocks base method.
func (m *MockClient) MoveProjectCard(org string, projectCardID, newColumnID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveProjectCard", org, projectCardID, newColumnID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveProjectCard indicates an expected call of MoveProjectCard.
func (mr *MockClientMockRecorder) MoveProjectCard(org, projectCardID, newColumnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveProjectCard", reflect.TypeOf((*MockClient)(nil).MoveProjectCard), org, projectCardID, newColumnID)
}

// Query mocks base method.
func (m *MockClient) Query(ctx context.Context, q interface{}, vars map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, q, vars)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockClientMockRecorder) Query(ctx, q, vars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), ctx, q, vars)
}

// QueryWithGitHubAppsSupport mocks base method.
func (m *MockClient) QueryWithGitHubAppsSupport(ctx context.Context, q interface{}, vars map[string]interface{}, org string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithGitHubAppsSupport", ctx, q, vars, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryWithGitHubAppsSupport indicates an expected call of QueryWithGitHubAppsSupport.
func (mr *MockClientMockRecorder) QueryWithGitHubAppsSupport(ctx, q, vars, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithGitHubAppsSupport", reflect.TypeOf((*MockClient)(nil).QueryWithGitHubAppsSupport), ctx, q, vars, org)
}

// RemoveBranchProtection mocks base method.
func (m *MockClient) RemoveBranchProtection(org, repo, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBranchProtection", org, repo, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBranchProtection indicates an expected call of RemoveBranchProtection.
func (mr *MockClientMockRecorder) RemoveBranchProtection(org, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBranchProtection", reflect.TypeOf((*MockClient)(nil).RemoveBranchProtection), org, repo, branch)
}

// RemoveLabel mocks base method.
func (m *MockClient) RemoveLabel(org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel.
func (mr *MockClientMockRecorder) RemoveLabel(org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockClient)(nil).RemoveLabel), org, repo, number, label)
}

// RemoveLabelWithContext mocks base method.
func (m *MockClient) RemoveLabelWithContext(ctx context.Context, org, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelWithContext", ctx, org, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabelWithContext indicates an expected call of RemoveLabelWithContext.
func (mr *MockClientMockRecorder) RemoveLabelWithContext(ctx, org, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelWithContext", reflect.TypeOf((*MockClient)(nil).RemoveLabelWithContext), ctx, org, repo, number, label)
}

// RemoveOrgMembership mocks base method.
func (m *MockClient) RemoveOrgMembership(org, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrgMembership", org, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrgMembership indicates an expected call of RemoveOrgMembership.
func (mr *MockClientMockRecorder) RemoveOrgMembership(org, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrgMembership", reflect.TypeOf((*MockClient)(nil).RemoveOrgMembership), org, user)
}

// RemoveTeamMembership mocks base method.
func (m *MockClient) RemoveTeamMembership(org string, id int, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamMembership", org, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeamMembership indicates an expected call of RemoveTeamMembership.
func (mr *MockClientMockRecorder) RemoveTeamMembership(org, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamMembership", reflect.TypeOf((*MockClient)(nil).RemoveTeamMembership), org, id, user)
}

// RemoveTeamRepo mocks base method.
func (m *MockClient) RemoveTeamRepo(id int, org, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeamRepo", id, org, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeamRepo indicates an expected call of RemoveTeamRepo.
func (mr *MockClientMockRecorder) RemoveTeamRepo(id, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeamRepo", reflect.TypeOf((*MockClient)(nil).RemoveTeamRepo), id, org, repo)
}

// ReopenIssue mocks base method.
func (m *MockClient) ReopenIssue(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReopenIssue", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReopenIssue indicates an expected call of ReopenIssue.
func (mr *MockClientMockRecorder) ReopenIssue(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenIssue", reflect.TypeOf((*MockClient)(nil).ReopenIssue), org, repo, number)
}

// ReopenPR mocks base method.
func (m *MockClient) ReopenPR(org, repo string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReopenPR", org, repo, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReopenPR indicates an expected call of ReopenPR.
func (mr *MockClientMockRecorder) ReopenPR(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReopenPR", reflect.TypeOf((*MockClient)(nil).ReopenPR), org, repo, number)
}

// RequestReview mocks base method.
func (m *MockClient) RequestReview(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReview", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReview indicates an expected call of RequestReview.
func (mr *MockClientMockRecorder) RequestReview(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReview", reflect.TypeOf((*MockClient)(nil).RequestReview), org, repo, number, logins)
}

// SetMax404Retries mocks base method.
func (m *MockClient) SetMax404Retries(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMax404Retries", arg0)
}

// SetMax404Retries indicates an expected call of SetMax404Retries.
func (mr *MockClientMockRecorder) SetMax404Retries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMax404Retries", reflect.TypeOf((*MockClient)(nil).SetMax404Retries), arg0)
}

// SetMilestone mocks base method.
func (m *MockClient) SetMilestone(org, repo string, issueNum, milestoneNum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMilestone", org, repo, issueNum, milestoneNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMilestone indicates an expected call of SetMilestone.
func (mr *MockClientMockRecorder) SetMilestone(org, repo, issueNum, milestoneNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMilestone", reflect.TypeOf((*MockClient)(nil).SetMilestone), org, repo, issueNum, milestoneNum)
}

// TeamHasMember mocks base method.
func (m *MockClient) TeamHasMember(org string, teamID int, memberLogin string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamHasMember", org, teamID, memberLogin)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamHasMember indicates an expected call of TeamHasMember.
func (mr *MockClientMockRecorder) TeamHasMember(org, teamID, memberLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamHasMember", reflect.TypeOf((*MockClient)(nil).TeamHasMember), org, teamID, memberLogin)
}

// Throttle mocks base method.
func (m *MockClient) Throttle(hourlyTokens, burst int, org ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{hourlyTokens, burst}
	for _, a := range org {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Throttle", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Throttle indicates an expected call of Throttle.
func (mr *MockClientMockRecorder) Throttle(hourlyTokens, burst interface{}, org ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{hourlyTokens, burst}, org...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Throttle", reflect.TypeOf((*MockClient)(nil).Throttle), varargs...)
}

// UnassignIssue mocks base method.
func (m *MockClient) UnassignIssue(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignIssue", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignIssue indicates an expected call of UnassignIssue.
func (mr *MockClientMockRecorder) UnassignIssue(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignIssue", reflect.TypeOf((*MockClient)(nil).UnassignIssue), org, repo, number, logins)
}

// UnrequestReview mocks base method.
func (m *MockClient) UnrequestReview(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnrequestReview", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnrequestReview indicates an expected call of UnrequestReview.
func (mr *MockClientMockRecorder) UnrequestReview(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrequestReview", reflect.TypeOf((*MockClient)(nil).UnrequestReview), org, repo, number, logins)
}

// UpdateBranchProtection mocks base method.
func (m *MockClient) UpdateBranchProtection(org, repo, branch string, config github.BranchProtectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", org, repo, branch, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection.
func (mr *MockClientMockRecorder) UpdateBranchProtection(org, repo, branch, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockClient)(nil).UpdateBranchProtection), org, repo, branch, config)
}

// UpdateOrgMembership mocks base method.
func (m *MockClient) UpdateOrgMembership(org, user string, admin bool) (*github.OrgMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgMembership", org, user, admin)
	ret0, _ := ret[0].(*github.OrgMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgMembership indicates an expected call of UpdateOrgMembership.
func (mr *MockClientMockRecorder) UpdateOrgMembership(org, user, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgMembership", reflect.TypeOf((*MockClient)(nil).UpdateOrgMembership), org, user, admin)
}

// UpdatePullRequest mocks base method.
func (m *MockClient) UpdatePullRequest(org, repo string, number int, title, body *string, open *bool, branch *string, canModify *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequest", org, repo, number, title, body, open, branch, canModify)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequest indicates an expected call of UpdatePullRequest.
func (mr *MockClientMockRecorder) UpdatePullRequest(org, repo, number, title, body, open, branch, canModify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequest", reflect.TypeOf((*MockClient)(nil).UpdatePullRequest), org, repo, number, title, body, open, branch, canModify)
}

// UpdatePullRequestBranch mocks base method.
func (m *MockClient) UpdatePullRequestBranch(org, repo string, number int, expectedHeadSha *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestBranch", org, repo, number, expectedHeadSha)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestBranch indicates an expected call of UpdatePullRequestBranch.
func (mr *MockClientMockRecorder) UpdatePullRequestBranch(org, repo, number, expectedHeadSha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestBranch", reflect.TypeOf((*MockClient)(nil).UpdatePullRequestBranch), org, repo, number, expectedHeadSha)
}

// UpdateRepo mocks base method.
func (m *MockClient) UpdateRepo(owner, name string, repo github.RepoUpdateRequest) (*github.FullRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", owner, name, repo)
	ret0, _ := ret[0].(*github.FullRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockClientMockRecorder) UpdateRepo(owner, name, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockClient)(nil).UpdateRepo), owner, name, repo)
}

// UpdateRepoLabel mocks base method.
func (m *MockClient) UpdateRepoLabel(org, repo, label, newName, description, color string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoLabel", org, repo, label, newName, description, color)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoLabel indicates an expected call of UpdateRepoLabel.
func (mr *MockClientMockRecorder) UpdateRepoLabel(org, repo, label, newName, description, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoLabel", reflect.TypeOf((*MockClient)(nil).UpdateRepoLabel), org, repo, label, newName, description, color)
}

// UpdateTeamMembership mocks base method.
func (m *MockClient) UpdateTeamMembership(org string, id int, user string, maintainer bool) (*github.TeamMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamMembership", org, id, user, maintainer)
	ret0, _ := ret[0].(*github.TeamMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeamMembership indicates an expected call of UpdateTeamMembership.
func (mr *MockClientMockRecorder) UpdateTeamMembership(org, id, user, maintainer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamMembership", reflect.TypeOf((*MockClient)(nil).UpdateTeamMembership), org, id, user, maintainer)
}

// UpdateTeamRepo mocks base method.
func (m *MockClient) UpdateTeamRepo(id int, org, repo string, permission github.TeamPermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamRepo", id, org, repo, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamRepo indicates an expected call of UpdateTeamRepo.
func (mr *MockClientMockRecorder) UpdateTeamRepo(id, org, repo, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamRepo", reflect.TypeOf((*MockClient)(nil).UpdateTeamRepo), id, org, repo, permission)
}

// WithFields mocks base method.
func (m *MockClient) WithFields(fields logrus.Fields) github.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(github.Client)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockClientMockRecorder) WithFields(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockClient)(nil).WithFields), fields)
}

// MockhttpClient is a mock of httpClient interface.
type MockhttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClientMockRecorder
}

// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.
type MockhttpClientMockRecorder struct {
	mock *MockhttpClient
}

// NewMockhttpClient creates a new mock instance.
func NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {
	mock := &MockhttpClient{ctrl: ctrl}
	mock.recorder = &MockhttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockhttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockhttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockhttpClient)(nil).Do), req)
}

// MockgqlClient is a mock of gqlClient interface.
type MockgqlClient struct {
	ctrl     *gomock.Controller
	recorder *MockgqlClientMockRecorder
}

// MockgqlClientMockRecorder is the mock recorder for MockgqlClient.
type MockgqlClientMockRecorder struct {
	mock *MockgqlClient
}

// NewMockgqlClient creates a new mock instance.
func NewMockgqlClient(ctrl *gomock.Controller) *MockgqlClient {
	mock := &MockgqlClient{ctrl: ctrl}
	mock.recorder = &MockgqlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgqlClient) EXPECT() *MockgqlClientMockRecorder {
	return m.recorder
}

// QueryWithGitHubAppsSupport mocks base method.
func (m *MockgqlClient) QueryWithGitHubAppsSupport(ctx context.Context, q interface{}, vars map[string]interface{}, org string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithGitHubAppsSupport", ctx, q, vars, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryWithGitHubAppsSupport indicates an expected call of QueryWithGitHubAppsSupport.
func (mr *MockgqlClientMockRecorder) QueryWithGitHubAppsSupport(ctx, q, vars, org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithGitHubAppsSupport", reflect.TypeOf((*MockgqlClient)(nil).QueryWithGitHubAppsSupport), ctx, q, vars, org)
}

// forUserAgent mocks base method.
func (m *MockgqlClient) forUserAgent(userAgent string) gqlClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forUserAgent", userAgent)
	ret0, _ := ret[0].(gqlClient)
	return ret0
}

// forUserAgent indicates an expected call of forUserAgent.
func (mr *MockgqlClientMockRecorder) forUserAgent(userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forUserAgent", reflect.TypeOf((*MockgqlClient)(nil).forUserAgent), userAgent)
}

// Interface for how prow interacts with the graphql client, which we may throttle.
type gqlClient interface {
	QueryWithGitHubAppsSupport(ctx context.Context, q interface{}, vars map[string]interface{}, org string) error
	forUserAgent(userAgent string) gqlClient
}
